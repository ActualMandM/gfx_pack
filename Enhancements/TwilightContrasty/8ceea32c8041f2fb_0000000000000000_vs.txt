#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_packing : enable
// shader 8ceea32c8041f2fb
//tiles
const float hazeFactor = $hazeFactor;
uniform ivec4 uf_remappedVS[17];
uniform vec2 uf_windowSpaceToClipSpaceTransform;
layout(location = 0) in uvec4 attrDataSem0;
layout(location = 1) in uvec4 attrDataSem1;
layout(location = 2) in uvec4 attrDataSem2;
layout(location = 3) in uvec4 attrDataSem3;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 0) out vec4 passParameterSem1;
layout(location = 1) out vec4 passParameterSem0;
layout(location = 2) out vec4 passParameterSem3;
layout(location = 3) out vec4 passParameterSem4;
layout(location = 4) out vec4 passParameterSem5;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
uvec4 attrDecoder;
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = floatBitsToInt(ivec4(gl_VertexID, 0, 0, gl_InstanceID));
attrDecoder.xyz = attrDataSem0.xyz;
attrDecoder.xyz = (attrDecoder.xyz>>24)|((attrDecoder.xyz>>8)&0xFF00)|((attrDecoder.xyz<<8)&0xFF0000)|((attrDecoder.xyz<<24));
attrDecoder.w = 0;
R3f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(floatBitsToInt(1.0)));
attrDecoder.xyz = attrDataSem1.xyz;
attrDecoder.xyz = (attrDecoder.xyz>>24)|((attrDecoder.xyz>>8)&0xFF00)|((attrDecoder.xyz<<8)&0xFF0000)|((attrDecoder.xyz<<24));
attrDecoder.w = 0;
R2f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(floatBitsToInt(0.0)));
attrDecoder.xyzw = floatBitsToUint(vec4(attrDataSem2.xyzw)/255.0);
R1f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(int(attrDecoder.w)));
attrDecoder.xy = attrDataSem3.xy;
attrDecoder.xy = (attrDecoder.xy>>24)|((attrDecoder.xy>>8)&0xFF00)|((attrDecoder.xy<<8)&0xFF0000)|((attrDecoder.xy<<24));
attrDecoder.z = 0;
attrDecoder.w = 0;
R4f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(floatBitsToInt(0.0)), intBitsToFloat(floatBitsToInt(1.0)));
// 0
R127f.x = dot(vec4(R3f.x,R3f.y,R3f.z,R3f.w),vec4(intBitsToFloat(uf_remappedVS[0].x),intBitsToFloat(uf_remappedVS[0].y),intBitsToFloat(uf_remappedVS[0].z),intBitsToFloat(uf_remappedVS[0].w)));
PV0f.x = R127f.x;
PV0f.y = R127f.x;
PV0f.z = R127f.x;
PV0f.w = R127f.x;
R127f.w = R3f.w;
PS0f = R127f.w;
// 1
tempf.x = dot(vec4(R3f.x,R3f.y,R3f.z,R3f.w),vec4(intBitsToFloat(uf_remappedVS[1].x),intBitsToFloat(uf_remappedVS[1].y),intBitsToFloat(uf_remappedVS[1].z),intBitsToFloat(uf_remappedVS[1].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R127f.y = tempf.x;
R4f.w = 1.0;
PS1f = R4f.w;
// 2
tempf.x = dot(vec4(R3f.x,R3f.y,R3f.z,R3f.w),vec4(intBitsToFloat(uf_remappedVS[2].x),intBitsToFloat(uf_remappedVS[2].y),intBitsToFloat(uf_remappedVS[2].z),intBitsToFloat(uf_remappedVS[2].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.z = tempf.x;
R4f.z = 1.0;
PS0f = R4f.z;
// 3
tempf.x = dot(vec4(R127f.x,R127f.y,PV0f.x,R127f.w),vec4(intBitsToFloat(uf_remappedVS[3].x),intBitsToFloat(uf_remappedVS[3].y),intBitsToFloat(uf_remappedVS[3].z),intBitsToFloat(uf_remappedVS[3].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R3f.w = tempf.x;
R6f.z = 1.0;
PS1f = R6f.z;
// 4
tempf.x = dot(vec4(R127f.x,R127f.y,R127f.z,R127f.w),vec4(intBitsToFloat(uf_remappedVS[4].x),intBitsToFloat(uf_remappedVS[4].y),intBitsToFloat(uf_remappedVS[4].z),intBitsToFloat(uf_remappedVS[4].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R3f.z = tempf.x;
PS0f = 1.0 / PV1f.x;
PS0f /= 2.0;
// 5
R3f.x = dot(vec4(R127f.x,R127f.y,R127f.z,R127f.w),vec4(intBitsToFloat(uf_remappedVS[5].x),intBitsToFloat(uf_remappedVS[5].y),intBitsToFloat(uf_remappedVS[5].z),intBitsToFloat(uf_remappedVS[5].w)));
PV1f.x = R3f.x;
PV1f.y = R3f.x;
PV1f.z = R3f.x;
PV1f.w = R3f.x;
R126f.y = (mul_nonIEEE(PV0f.x,PS0f) + 0.5);
PS1f = R126f.y;
// 6
tempf.x = dot(vec4(R127f.x,R127f.y,R127f.z,R127f.w),vec4(intBitsToFloat(uf_remappedVS[6].x),intBitsToFloat(uf_remappedVS[6].y),intBitsToFloat(uf_remappedVS[6].z),intBitsToFloat(uf_remappedVS[6].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R3f.y = tempf.x;
R2f.w = 0.0;
PS0f = R2f.w;
// 7
R127f.x = -(R126f.y) + intBitsToFloat(uf_remappedVS[7].y);
PV1f.y = intBitsToFloat(uf_remappedVS[7].w) * intBitsToFloat(0x3d430c31);
R5f.z = R4f.z;
PV1f.w = intBitsToFloat(uf_remappedVS[7].w) + intBitsToFloat(0xc1a80000);
R5f.x = R4f.x;
PS1f = R5f.x;
// 8
PV0f.x = floor(PV1f.y);
R5f.y = R4f.y;
R123f.z = (PV1f.w * intBitsToFloat(0x3d430c31) + 1.0);
PV0f.z = R123f.z;
R0f.x = intBitsToFloat(uf_remappedVS[8].x);
PS0f = R0f.x;
// 9
PV1f.y = floor(PV0f.z);
R127f.z = PV0f.x * intBitsToFloat(0x3d4ccccd);
R0f.y = intBitsToFloat(uf_remappedVS[8].y);
PS1f = R0f.y;
// 10
R123f.x = (-(PV1f.y) * intBitsToFloat(0x41a80000) + intBitsToFloat(uf_remappedVS[7].w));
PV0f.x = R123f.x;
R0f.z = intBitsToFloat(uf_remappedVS[8].z);
PS0f = 1.0 / R127f.x;
// 11
R123f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[7].x),PS0f) + -(intBitsToFloat(uf_remappedVS[7].z)));
PV1f.z = R123f.z;
R127f.w = PV0f.x * intBitsToFloat(0x3d4ccccd);
PS1f = 1.0 / R127f.z;
// 12
PV0f.x = mul_nonIEEE(PV1f.z, PS1f);
PV0f.x = clamp(PV0f.x, 0.0, 1.0);
// 13
R0f.w = mul_nonIEEE(R127f.w, PV0f.x);
// export
gl_Position = vec4(R3f.x, R3f.y, R3f.z, R3f.w);
// export
passParameterSem1 = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
// export
passParameterSem0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w) *hazeFactor;
// export
passParameterSem3 = vec4(R5f.x, R5f.y, R5f.z, R5f.w);
// export
// skipped export to semanticId 255
// 0
R127f.x = dot(vec4(R2f.x,R2f.y,R2f.z,R4f.w),vec4(intBitsToFloat(uf_remappedVS[9].x),intBitsToFloat(uf_remappedVS[9].y),intBitsToFloat(uf_remappedVS[9].z),intBitsToFloat(uf_remappedVS[9].w)));
PV0f.x = R127f.x;
PV0f.y = R127f.x;
PV0f.z = R127f.x;
PV0f.w = R127f.x;
// 1
tempf.x = dot(vec4(R2f.x,R2f.y,R2f.z,R4f.w),vec4(intBitsToFloat(uf_remappedVS[10].x),intBitsToFloat(uf_remappedVS[10].y),intBitsToFloat(uf_remappedVS[10].z),intBitsToFloat(uf_remappedVS[10].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R126f.y = tempf.x;
// 2
R2f.x = dot(vec4(R4f.x,R4f.y,R4f.z,R4f.z),vec4(intBitsToFloat(uf_remappedVS[11].x),intBitsToFloat(uf_remappedVS[11].y),intBitsToFloat(uf_remappedVS[11].z),intBitsToFloat(uf_remappedVS[11].w)));
PV0f.x = R2f.x;
PV0f.y = R2f.x;
PV0f.z = R2f.x;
PV0f.w = R2f.x;
// 3
tempf.x = dot(vec4(R4f.x,R4f.y,R4f.z,R4f.z),vec4(intBitsToFloat(uf_remappedVS[12].x),intBitsToFloat(uf_remappedVS[12].y),intBitsToFloat(uf_remappedVS[12].z),intBitsToFloat(uf_remappedVS[12].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R2f.y = tempf.x;
// 4
tempf.x = dot(vec4(R4f.x,R4f.y,R4f.z,R4f.z),vec4(intBitsToFloat(uf_remappedVS[13].x),intBitsToFloat(uf_remappedVS[13].y),intBitsToFloat(uf_remappedVS[13].z),intBitsToFloat(uf_remappedVS[13].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R2f.z = tempf.x;
// 5
R4f.x = dot(vec4(R127f.x,R126f.y,R6f.z,R6f.z),vec4(intBitsToFloat(uf_remappedVS[14].x),intBitsToFloat(uf_remappedVS[14].y),intBitsToFloat(uf_remappedVS[14].z),intBitsToFloat(uf_remappedVS[14].w)));
PV1f.x = R4f.x;
PV1f.y = R4f.x;
PV1f.z = R4f.x;
PV1f.w = R4f.x;
// 6
tempf.x = dot(vec4(R127f.x,R126f.y,R6f.z,R6f.z),vec4(intBitsToFloat(uf_remappedVS[15].x),intBitsToFloat(uf_remappedVS[15].y),intBitsToFloat(uf_remappedVS[15].z),intBitsToFloat(uf_remappedVS[15].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R4f.y = tempf.x;
// 7
tempf.x = dot(vec4(R127f.x,R126f.y,R6f.z,R6f.z),vec4(intBitsToFloat(uf_remappedVS[16].x),intBitsToFloat(uf_remappedVS[16].y),intBitsToFloat(uf_remappedVS[16].z),intBitsToFloat(uf_remappedVS[16].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R4f.z = tempf.x;
// export
passParameterSem4 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);
// export
passParameterSem5 = vec4(R4f.x, R4f.y, R4f.z, R4f.w);
}
