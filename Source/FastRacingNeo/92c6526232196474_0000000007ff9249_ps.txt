#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 92c6526232196474
const float resScale = $height/720;
uniform ivec4 uf_remappedPS[4];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x21496800 res 512x4096x1 dim 1 tm: 4 format 0433 compSel: 0 1 2 3 mipView: 0x0 (num 0xd) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x21746000 res 512x4096x1 dim 1 tm: 4 format 0035 compSel: 0 1 4 5 mipView: 0x0 (num 0xd) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0xf4000800 res 1280x720x1 dim 1 tm: 4 format 041a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 3) uniform sampler2D textureUnitPS3;// Tex3 addr 0xf4385000 res 1280x720x1 dim 1 tm: 4 format 021f compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0xf4a8d000 res 1280x720x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 2 2 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem6;
layout(location = 4) in vec4 passParameterSem7;
layout(location = 5) in vec4 passParameterSem8;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 2) out vec4 passPixelColor2;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[4];
bool activeMaskStackC[5];
activeMaskStack[0] = false;
activeMaskStack[1] = false;
activeMaskStack[2] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStackC[2] = false;
activeMaskStackC[3] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameterSem0);
R1i = floatBitsToInt(passParameterSem1);
R2i = floatBitsToInt(passParameterSem2);
R3i = floatBitsToInt(passParameterSem6);
R4i = floatBitsToInt(passParameterSem7);
R5i = floatBitsToInt(passParameterSem8);
R6i = floatBitsToInt(vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)*resScale);
if( activeMaskStackC[1] == true ) {
R1i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R1i.xy)).xyzw);
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
R2i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.w), intBitsToFloat(R1i.w)));
R2i.w = clampFI32(R2i.w);
// 1
predResult = (1.0 > intBitsToFloat(uf_remappedPS[0].z));
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
PV0i.x = floatBitsToInt(intBitsToFloat(R6i.x) * intBitsToFloat(0x3d000000));
PV0i.y = floatBitsToInt(intBitsToFloat(R6i.y) * intBitsToFloat(0x3d000000));
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.y),-0.0),vec4(intBitsToFloat(0x414fd639),intBitsToFloat(0x429c774c),0.0,0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
// 2
R123i.y = floatBitsToInt((intBitsToFloat(PV1i.x) * intBitsToFloat(0x3e22f983) + 0.5));
PV0i.y = R123i.y;
// 3
PV1i.x = floatBitsToInt(fract(intBitsToFloat(PV0i.y)));
// 4
R123i.w = floatBitsToInt((intBitsToFloat(PV1i.x) * intBitsToFloat(0x40c90fdb) + intBitsToFloat(0xc0490fdb)));
PV0i.w = R123i.w;
// 5
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.w) * intBitsToFloat(0x3e22f983));
// 6
PS0i = floatBitsToInt(sin((intBitsToFloat(PV1i.z))/0.1591549367));
// 7
PV1i.x = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(0x472aee8c));
// 8
R0i.w = floatBitsToInt(fract(intBitsToFloat(PV1i.x)));
PV0i.w = R0i.w;
// 9
if(  (intBitsToFloat(PV0i.w) > intBitsToFloat(uf_remappedPS[0].z))) discard;
}
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
predResult = (intBitsToFloat(R0i.w) > intBitsToFloat(uf_remappedPS[0].z));
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
if(  (intBitsToFloat(R2i.w) == 0.0)) discard;
}
if( activeMaskStackC[1] == true ) {
R2i.xy = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R2i.xy)).xy);
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
R127i.x = floatBitsToInt((intBitsToFloat(R2i.y) * 2.0 + -(1.0)));
R127i.y = floatBitsToInt((intBitsToFloat(R2i.x) * 2.0 + -(1.0)));
PV0i.y = R127i.y;
PV0i.z = R1i.x;
PV0i.z = clampFI32(PV0i.z);
PV0i.w = R1i.z;
PV0i.w = clampFI32(PV0i.w);
// 1
R7i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(uf_remappedPS[1].x)));
R7i.x = clampFI32(R7i.x);
PV1i.x = R7i.x;
R7i.y = floatBitsToInt(min(intBitsToFloat(PV0i.w), 1.0));
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.y)),intBitsToFloat(PV0i.y)) + 1.0));
PV1i.w = R123i.w;
R3i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(uf_remappedPS[2].x)));
R3i.w = clampFI32(R3i.w);
PS1i = R3i.w;
// 2
R0i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),-(intBitsToFloat(PV1i.x))) + intBitsToFloat(R1i.y)));
R0i.y = clampFI32(R0i.y);
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R127i.x)),intBitsToFloat(R127i.x)) + intBitsToFloat(PV1i.w)));
PV0i.z = R123i.z;
// 3
PV1i.y = floatBitsToInt(max(intBitsToFloat(PV0i.z), 0.0));
// 4
PS0i = floatBitsToInt(sqrt(intBitsToFloat(PV1i.y)));
// 5
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.z), intBitsToFloat(PS0i)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.y), intBitsToFloat(PS0i)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.x), intBitsToFloat(PS0i)));
// 6
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.x),intBitsToFloat(R4i.x)) + intBitsToFloat(PV1i.w)));
PV0i.x = R123i.x;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.x),intBitsToFloat(R4i.z)) + intBitsToFloat(PV1i.y)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.x),intBitsToFloat(R4i.y)) + intBitsToFloat(PV1i.z)));
PV0i.w = R123i.w;
// 7
backupReg0i = R127i.y;
backupReg0i = R127i.y;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(R3i.x)) + intBitsToFloat(PV0i.x)));
PV1i.x = R127i.x;
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(R3i.y)) + intBitsToFloat(PV0i.w)));
PV1i.y = R127i.y;
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(R3i.z)) + intBitsToFloat(PV0i.z)));
PV1i.z = R127i.z;
// 8
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),-0.0),vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
// 9
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 10
R3i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(PS1i)));
R3i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(PS1i)));
R3i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PS1i)));
PV0i.z = R3i.z;
// 11
PV1i.x = ((0.0 > intBitsToFloat(PV0i.z))?int(0xFFFFFFFF):int(0x0));
// 12
R4i.z = ((PV1i.x == 0)?(0):(0x00000004));
// 13
predResult = (uf_remappedPS[0].w == int(1));
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
R2i.xyz = ivec3(uf_remappedPS[3].x,uf_remappedPS[3].y,uf_remappedPS[3].z);
R0i.w = uf_remappedPS[3].w;
}
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
R2i.xyz = ivec3(R0i.y,R0i.y,R0i.y);
// 1
predResult = (uf_remappedPS[0].w == 0x00000002);
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
// 0
backupReg0i = R0i.y;
backupReg0i = R0i.y;
PV0i.x = floatBitsToInt(-(intBitsToFloat(R0i.y)) + intBitsToFloat(uf_remappedPS[3].y));
PV0i.y = floatBitsToInt(-(intBitsToFloat(backupReg0i)) + intBitsToFloat(uf_remappedPS[3].x));
PV0i.w = floatBitsToInt(-(intBitsToFloat(backupReg0i)) + intBitsToFloat(uf_remappedPS[3].z));
// 1
R2i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(uf_remappedPS[3].w)) + intBitsToFloat(R0i.y)));
R2i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_remappedPS[3].w)) + intBitsToFloat(R0i.y)));
R2i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(uf_remappedPS[3].w)) + intBitsToFloat(R0i.y)));
}
activeMaskStack[2] = activeMaskStack[2] == false;
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
if( activeMaskStackC[3] == true ) {
activeMaskStack[3] = activeMaskStack[2];
activeMaskStackC[4] = activeMaskStackC[3];
// 0
predResult = (uf_remappedPS[0].w == 0x00000003);
activeMaskStack[3] = predResult;
activeMaskStackC[4] = predResult == true && activeMaskStackC[3] == true;
}
else {
activeMaskStack[3] = false;
activeMaskStackC[4] = false;
}
if( activeMaskStackC[4] == true ) {
// 0
R2i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.y), intBitsToFloat(uf_remappedPS[3].x)));
R2i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.y), intBitsToFloat(uf_remappedPS[3].y)));
R2i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.y), intBitsToFloat(uf_remappedPS[3].z)));
}
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
R1i.xyzw = floatBitsToInt(texelFetch(textureUnitPS3, ivec2(intBitsToFloat(R6i.x), intBitsToFloat(R6i.y)), 0).xyzw);
R0i.xyzw = floatBitsToInt(texelFetch(textureUnitPS2, ivec2(intBitsToFloat(R6i.x), intBitsToFloat(R6i.y)), 0).xyzw);
R6i.xyzw = floatBitsToInt(texelFetch(textureUnitPS4, ivec2(intBitsToFloat(R6i.x), intBitsToFloat(R6i.y)), 0).xyzw);
}
if( activeMaskStackC[1] == true ) {
// 0
backupReg0i = R0i.w;
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),-(intBitsToFloat(R2i.w))) + intBitsToFloat(R1i.y)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R1i.x)),intBitsToFloat(R1i.x)) + intBitsToFloat(0x3f800347)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),-(intBitsToFloat(R2i.w))) + intBitsToFloat(R1i.x)));
PV0i.z = R123i.z;
PV0i.w = floatBitsToInt(intBitsToFloat(backupReg0i) * intBitsToFloat(0x437f0000));
R127i.y = R4i.z & 0x00000004;
PS0i = R127i.y;
// 1
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R1i.y)),intBitsToFloat(R1i.y)) + intBitsToFloat(PV0i.y)));
PV1i.x = R123i.x;
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.w),intBitsToFloat(R3i.x)) + intBitsToFloat(PV0i.z)));
R125i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.w),intBitsToFloat(R3i.y)) + intBitsToFloat(PV0i.x)));
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.x),-(intBitsToFloat(R2i.w))) + intBitsToFloat(R0i.x)));
PS1i = int(intBitsToFloat(PV0i.w));
// 2
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.y),-(intBitsToFloat(R2i.w))) + intBitsToFloat(R0i.y)));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.z),-(intBitsToFloat(R2i.w))) + intBitsToFloat(R0i.z)));
R124i.z = 0xfffffffb & PS1i;
PV0i.z = R124i.z;
R126i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R2i.w)),intBitsToFloat(R6i.x)) + intBitsToFloat(R6i.x)));
PS0i = floatBitsToInt(sqrt(intBitsToFloat(PV1i.x)));
// 3
backupReg0i = R127i.y;
backupReg1i = R2i.x;
backupReg2i = R127i.w;
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS0i),-(intBitsToFloat(R2i.w))) + intBitsToFloat(PS0i)));
PV1i.x = R123i.x;
R127i.y = PV0i.z | backupReg0i;
R127i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R2i.w)),intBitsToFloat(R6i.z)) + intBitsToFloat(R6i.z)));
R127i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R2i.w)),intBitsToFloat(R6i.y)) + intBitsToFloat(R6i.y)));
R2i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.w),intBitsToFloat(backupReg1i)) + intBitsToFloat(backupReg2i)));
PS1i = R2i.x;
// 4
backupReg0i = R2i.y;
backupReg1i = R2i.z;
R6i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.w),intBitsToFloat(R7i.x)) + intBitsToFloat(R126i.w)));
R2i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.w),intBitsToFloat(backupReg0i)) + intBitsToFloat(R127i.x)));
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.w),intBitsToFloat(R3i.z)) + intBitsToFloat(PV1i.x)));
PV0i.z = R126i.z;
R0i.w = R1i.w;
R2i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.w),intBitsToFloat(backupReg1i)) + intBitsToFloat(R126i.y)));
PS0i = R2i.z;
// 5
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R125i.y),intBitsToFloat(R125i.z),intBitsToFloat(PV0i.z),-0.0),vec4(intBitsToFloat(R125i.y),intBitsToFloat(R125i.z),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R6i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.w),intBitsToFloat(R3i.w)) + intBitsToFloat(R127i.w)));
PS1i = R6i.y;
// 6
R6i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.w),intBitsToFloat(R7i.y)) + intBitsToFloat(R127i.z)));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 7
R0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.y), intBitsToFloat(PS0i)));
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.z), intBitsToFloat(PS0i)));
R0i.z = R1i.z;
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(PS0i)));
// 8
PV0i.w = ((0.0 > intBitsToFloat(PV1i.w))?int(0xFFFFFFFF):int(0x0));
// 9
R123i.z = ((PV0i.w == 0)?(R124i.z):(R127i.y));
PV1i.z = R123i.z;
// 10
PS0i = floatBitsToInt(float(PV1i.z));
// 11
R2i.w = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(0x3b808081));
// 12
R5i.xyz = ivec3(R6i.x,R6i.y,R6i.z);
R5i.w = R6i.w;
// 13
R4i.xyz = ivec3(R0i.x,R0i.y,R0i.z);
R4i.w = R0i.w;
// 14
R3i.xyz = ivec3(R2i.x,R2i.y,R2i.z);
R3i.w = R2i.w;
}
// export
passPixelColor0 = vec4(intBitsToFloat(R3i.x), intBitsToFloat(R3i.y), intBitsToFloat(R3i.z), intBitsToFloat(R3i.w));
passPixelColor1 = vec4(intBitsToFloat(R4i.x), intBitsToFloat(R4i.y), intBitsToFloat(R4i.z), intBitsToFloat(R4i.w));
passPixelColor2 = vec4(intBitsToFloat(R5i.x), intBitsToFloat(R5i.y), intBitsToFloat(R5i.z), intBitsToFloat(R5i.w));
}
