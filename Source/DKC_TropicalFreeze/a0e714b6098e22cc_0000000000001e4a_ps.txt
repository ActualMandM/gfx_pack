#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader a0e714b6098e22cc //remove 2d object alpha stencil artifact
uniform ivec4 uf_remappedPS[10];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x4f337000 res 128x1x1 dim 1 tm: 1 format 0001 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0xf4384800 res 1280x720x1 dim 1 tm: 4 format 080e compSel: 0 0 0 0 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 2) uniform sampler3D textureUnitPS2;// Tex2 addr 0x2e6ec000 res 256x256x8 dim 2 tm: 7 format 0031 compSel: 0 1 2 3 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x8) Sampler2 ClampX/Y/Z: 0 0 0 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameterSem0);
R1i = floatBitsToInt(passParameterSem1);
// 0
R3i.x = floatBitsToInt(intBitsToFloat(uf_remappedPS[0].w) * 1.0);
R3i.y = floatBitsToInt(intBitsToFloat(uf_remappedPS[0].z) * 1.0);
R2i.z = floatBitsToInt(intBitsToFloat(uf_remappedPS[0].y) * 1.0);
R2i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[0].x) * 1.0);
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R1i.z));
// 1
R4i.x = 0x3f800000;
R5i.y = 0;
R3i.z = floatBitsToInt(intBitsToFloat(R1i.y) * intBitsToFloat(PS0i));
PV1i.z = R3i.z;
R3i.w = floatBitsToInt(intBitsToFloat(R1i.x) * intBitsToFloat(PS0i));
PV1i.w = R3i.w;
// 2
R2i.x = floatBitsToInt((intBitsToFloat(PV1i.w) * 0.5 + 0.5));
PV0i.y = floatBitsToInt(-(intBitsToFloat(PV1i.z)));
// 3
R2i.y = floatBitsToInt((intBitsToFloat(PV0i.y) * 0.5 + 0.5));
R2i.x = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R2i.xy)).x);
// 0
R123i.x = floatBitsToInt((intBitsToFloat(R2i.x) * 2.0 + -(1.0)));
PV0i.x = R123i.x;
R2i.y = ((intBitsToFloat(R2i.x) == 1.0)?int(0xFFFFFFFF):int(0x0));
// 1
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_remappedPS[1].w)) + intBitsToFloat(R3i.x)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_remappedPS[1].z)) + intBitsToFloat(R3i.y)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_remappedPS[1].y)) + intBitsToFloat(R2i.z)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_remappedPS[1].x)) + intBitsToFloat(R2i.w)));
PV1i.w = R123i.w;
// 2
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.z),intBitsToFloat(uf_remappedPS[2].w)) + intBitsToFloat(PV1i.x)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.z),intBitsToFloat(uf_remappedPS[2].z)) + intBitsToFloat(PV1i.y)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.z),intBitsToFloat(uf_remappedPS[2].y)) + intBitsToFloat(PV1i.z)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.z),intBitsToFloat(uf_remappedPS[2].x)) + intBitsToFloat(PV1i.w)));
PV0i.w = R123i.w;
// 3
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.w),intBitsToFloat(uf_remappedPS[3].w)) + intBitsToFloat(PV0i.x)));
PV1i.x = R123i.x;
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.w),intBitsToFloat(uf_remappedPS[3].z)) + intBitsToFloat(PV0i.y)));
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.w),intBitsToFloat(uf_remappedPS[3].y)) + intBitsToFloat(PV0i.z)));
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.w),intBitsToFloat(uf_remappedPS[3].x)) + intBitsToFloat(PV0i.w)));
// 4
PS0i = floatBitsToInt(1.0 / intBitsToFloat(PV1i.x));
// 5
backupReg0i = R127i.y;
R127i.x = floatBitsToInt(intBitsToFloat(R127i.w) * intBitsToFloat(PS0i));
PV1i.x = R127i.x;
R127i.y = floatBitsToInt(intBitsToFloat(R127i.z) * intBitsToFloat(PS0i));
PV1i.y = R127i.y;
R127i.z = floatBitsToInt(intBitsToFloat(backupReg0i) * intBitsToFloat(PS0i));
PV1i.z = R127i.z;
// 6
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),intBitsToFloat(R4i.x)),vec4(intBitsToFloat(uf_remappedPS[4].x),intBitsToFloat(uf_remappedPS[4].y),intBitsToFloat(uf_remappedPS[4].z),intBitsToFloat(uf_remappedPS[4].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R126i.z = tempi.x;
R1i.y = floatBitsToInt(-(intBitsToFloat(R1i.w)) + -(intBitsToFloat(PV1i.z)));
PS0i = R1i.y;
// 7
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(R127i.z),intBitsToFloat(R4i.x)),vec4(intBitsToFloat(uf_remappedPS[5].x),intBitsToFloat(uf_remappedPS[5].y),intBitsToFloat(uf_remappedPS[5].z),intBitsToFloat(uf_remappedPS[5].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R126i.y = tempi.x;
// 8
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(R127i.z),intBitsToFloat(R4i.x)),vec4(intBitsToFloat(uf_remappedPS[6].x),intBitsToFloat(uf_remappedPS[6].y),intBitsToFloat(uf_remappedPS[6].z),intBitsToFloat(uf_remappedPS[6].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.w = tempi.x;
// 9
R4i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.z),intBitsToFloat(uf_remappedPS[7].x)) + intBitsToFloat(uf_remappedPS[8].x)));
R4i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(uf_remappedPS[7].y)) + intBitsToFloat(uf_remappedPS[8].y)));
// 10
R4i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.w),intBitsToFloat(uf_remappedPS[7].z)) + intBitsToFloat(uf_remappedPS[8].z)));
R4i.x = floatBitsToInt(texture(textureUnitPS2, vec3(intBitsToFloat(R4i.x),intBitsToFloat(R4i.y),intBitsToFloat(R4i.z))).x);
// 0
PV0i.z = R4i.x;
PV0i.z = floatBitsToInt(intBitsToFloat(PV0i.z) * 2.0);
// 1
backupReg0i = R0i.w;
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PV0i.z)));
// 2
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(R1i.y)));
// 3
R5i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(uf_remappedPS[9].x)));
R5i.x = clampFI32(R5i.x);
R5i.x = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R5i.xy)).x);
// 0
R0i.w = ((R2i.y == 0)?(R5i.x):(0));
// export
//passPixelColor0 = vec4(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y), intBitsToFloat(R0i.z), intBitsToFloat(R0i.w));
}
