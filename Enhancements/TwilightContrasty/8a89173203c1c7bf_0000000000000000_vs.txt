#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_packing : enable
// shader 8a89173203c1c7bf
//Ordon village, maybe remove, messes with style a bit
const float hazeFactor = $hazeFactor;
uniform ivec4 uf_remappedVS[36];
uniform vec2 uf_windowSpaceToClipSpaceTransform;
layout(location = 0) in uvec4 attrDataSem0;
layout(location = 1) in uvec4 attrDataSem1;
layout(location = 2) in uvec4 attrDataSem2;
layout(location = 3) in uvec4 attrDataSem3;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 1) out vec4 passParameterSem0;
layout(location = 2) out vec4 passParameterSem3;
layout(location = 0) out vec4 passParameterSem1;
layout(location = 3) out vec4 passParameterSem4;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R10f = vec4(0.0);
vec4 R11f = vec4(0.0);
vec4 R12f = vec4(0.0);
vec4 R13f = vec4(0.0);
vec4 R14f = vec4(0.0);
vec4 R15f = vec4(0.0);
vec4 R16f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R124f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
uvec4 attrDecoder;
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = floatBitsToInt(ivec4(gl_VertexID, 0, 0, gl_InstanceID));
attrDecoder.xyz = attrDataSem0.xyz;
attrDecoder.xyz = (attrDecoder.xyz>>24)|((attrDecoder.xyz>>8)&0xFF00)|((attrDecoder.xyz<<8)&0xFF0000)|((attrDecoder.xyz<<24));
attrDecoder.w = 0;
R3f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(floatBitsToInt(1.0)));
attrDecoder.xyz = attrDataSem1.xyz;
attrDecoder.xyz = (attrDecoder.xyz>>24)|((attrDecoder.xyz>>8)&0xFF00)|((attrDecoder.xyz<<8)&0xFF0000)|((attrDecoder.xyz<<24));
attrDecoder.w = 0;
R2f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(floatBitsToInt(0.0)));
attrDecoder.xyzw = floatBitsToUint(vec4(attrDataSem2.xyzw)/255.0);
R1f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(int(attrDecoder.w)));
attrDecoder.xy = attrDataSem3.xy;
attrDecoder.xy = (attrDecoder.xy>>24)|((attrDecoder.xy>>8)&0xFF00)|((attrDecoder.xy<<8)&0xFF0000)|((attrDecoder.xy<<24));
attrDecoder.z = 0;
attrDecoder.w = 0;
R4f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(floatBitsToInt(0.0)), intBitsToFloat(floatBitsToInt(1.0)));
// 0
R6f.x = dot(vec4(R3f.x,R3f.y,R3f.z,R3f.w),vec4(intBitsToFloat(uf_remappedVS[0].x),intBitsToFloat(uf_remappedVS[0].y),intBitsToFloat(uf_remappedVS[0].z),intBitsToFloat(uf_remappedVS[0].w)));
PV0f.x = R6f.x;
PV0f.y = R6f.x;
PV0f.z = R6f.x;
PV0f.w = R6f.x;
R127f.w = R3f.w;
PS0f = R127f.w;
// 1
tempf.x = dot(vec4(R3f.x,R3f.y,R3f.z,R3f.w),vec4(intBitsToFloat(uf_remappedVS[1].x),intBitsToFloat(uf_remappedVS[1].y),intBitsToFloat(uf_remappedVS[1].z),intBitsToFloat(uf_remappedVS[1].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R5f.y = tempf.x;
R7f.z = 1.0;
PS1f = R7f.z;
// 2
tempf.x = dot(vec4(R3f.x,R3f.y,R3f.z,R3f.w),vec4(intBitsToFloat(uf_remappedVS[2].x),intBitsToFloat(uf_remappedVS[2].y),intBitsToFloat(uf_remappedVS[2].z),intBitsToFloat(uf_remappedVS[2].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R5f.z = tempf.x;
R6f.z = 1.0;
PS0f = R6f.z;
// 3
tempf.x = dot(vec4(R6f.x,R5f.y,PV0f.x,R127f.w),vec4(intBitsToFloat(uf_remappedVS[3].x),intBitsToFloat(uf_remappedVS[3].y),intBitsToFloat(uf_remappedVS[3].z),intBitsToFloat(uf_remappedVS[3].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R0f.w = tempf.x;
R9f.z = 1.0;
PS1f = R9f.z;
// 4
tempf.x = dot(vec4(R6f.x,R5f.y,R5f.z,R127f.w),vec4(intBitsToFloat(uf_remappedVS[4].x),intBitsToFloat(uf_remappedVS[4].y),intBitsToFloat(uf_remappedVS[4].z),intBitsToFloat(uf_remappedVS[4].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R0f.z = tempf.x;
R8f.z = 1.0;
PS0f = R8f.z;
// 5
R0f.x = dot(vec4(R6f.x,R5f.y,R5f.z,R127f.w),vec4(intBitsToFloat(uf_remappedVS[5].x),intBitsToFloat(uf_remappedVS[5].y),intBitsToFloat(uf_remappedVS[5].z),intBitsToFloat(uf_remappedVS[5].w)));
PV1f.x = R0f.x;
PV1f.y = R0f.x;
PV1f.z = R0f.x;
PV1f.w = R0f.x;
R11f.z = 1.0;
PS1f = R11f.z;
// 6
tempf.x = dot(vec4(R6f.x,R5f.y,R5f.z,R127f.w),vec4(intBitsToFloat(uf_remappedVS[6].x),intBitsToFloat(uf_remappedVS[6].y),intBitsToFloat(uf_remappedVS[6].z),intBitsToFloat(uf_remappedVS[6].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R0f.y = tempf.x;
R10f.z = 1.0;
PS0f = R10f.z;
// 7
R127f.x = dot(vec4(R2f.x,R2f.y,R2f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[0].x),intBitsToFloat(uf_remappedVS[0].y),intBitsToFloat(uf_remappedVS[0].z),0.0));
PV1f.x = R127f.x;
PV1f.y = R127f.x;
PV1f.z = R127f.x;
PV1f.w = R127f.x;
R13f.z = 1.0;
PS1f = R13f.z;
// 8
tempf.x = dot(vec4(R2f.x,R2f.y,R2f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[1].x),intBitsToFloat(uf_remappedVS[1].y),intBitsToFloat(uf_remappedVS[1].z),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.y = tempf.x;
R12f.z = 1.0;
PS0f = R12f.z;
// 9
backupReg0f = R0f.w;
tempf.x = dot(vec4(R2f.x,R2f.y,R2f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[2].x),intBitsToFloat(uf_remappedVS[2].y),intBitsToFloat(uf_remappedVS[2].z),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R127f.z = tempf.x;
PS1f = 1.0 / backupReg0f;
PS1f /= 2.0;
// 10
backupReg0f = R0f.z;
tempf.x = dot(vec4(R127f.x,R127f.y,PV1f.x,-0.0),vec4(R127f.x,R127f.y,PV1f.x,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R122f.x = (mul_nonIEEE(backupReg0f,PS1f) + 0.5);
PS0f = R122f.x;
// 11
R126f.x = -(PS0f) + intBitsToFloat(uf_remappedVS[7].y);
PV1f.y = intBitsToFloat(uf_remappedVS[7].w) * intBitsToFloat(0x3d430c31);
R126f.z = 1.0;
PV1f.w = intBitsToFloat(uf_remappedVS[7].w) + intBitsToFloat(0xc1a80000);
tempResultf = 1.0 / sqrt(PV0f.x);
PS1f = tempResultf;
// 12
R8f.x = mul_nonIEEE(R127f.x, PS1f);
R6f.y = mul_nonIEEE(R127f.y, PS1f);
R14f.z = mul_nonIEEE(R127f.z, PS1f);
PV0f.w = floor(PV1f.y);
R122f.x = (PV1f.w * intBitsToFloat(0x3d430c31) + 1.0);
PS0f = R122f.x;
// 13
R5f.x = 0.0;
PV1f.y = floor(PS0f);
PV1f.z = PV0f.w * intBitsToFloat(0x3d4ccccd);
R6f.w = 1.0;
PS1f = 1.0 / R126f.x;
// 14
R123f.x = (-(PV1f.y) * intBitsToFloat(0x41a80000) + intBitsToFloat(uf_remappedVS[7].w));
PV0f.x = R123f.x;
R2f.y = R4f.y;
R123f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[7].x),PS1f) + -(intBitsToFloat(uf_remappedVS[7].z)));
PV0f.z = R123f.z;
R16f.w = R1f.w;
PS0f = 1.0 / PV1f.z;
// 15
PV1f.x = mul_nonIEEE(PV0f.z, PS0f);
PV1f.x = clamp(PV1f.x, 0.0, 1.0);
R4f.y = intBitsToFloat(uf_remappedVS[8].y);
R2f.z = R126f.z;
PV1f.w = PV0f.x * intBitsToFloat(0x3d4ccccd);
R2f.x = R4f.x;
PS1f = R2f.x;
// 16
R4f.x = intBitsToFloat(uf_remappedVS[8].x);
R4f.z = intBitsToFloat(uf_remappedVS[8].z);
R4f.w = mul_nonIEEE(PV1f.w, PV1f.x);
// export
gl_Position = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
// export
passParameterSem0 = vec4(R4f.x, R4f.y, R4f.z, R4f.w) * hazeFactor;
// export
passParameterSem3 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);
// export
// skipped export to semanticId 255
// 0
R126f.x = -(R6f.x) + intBitsToFloat(uf_remappedVS[9].x);
PV0f.x = R126f.x;
R127f.y = -(R5f.y) + intBitsToFloat(uf_remappedVS[9].y);
PV0f.y = R127f.y;
R127f.z = -(R5f.z) + intBitsToFloat(uf_remappedVS[9].z);
PV0f.z = R127f.z;
// 1
tempf.x = dot(vec4(PV0f.x,PV0f.y,PV0f.z,-0.0),vec4(PV0f.x,PV0f.y,PV0f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R125f.w = tempf.x;
R127f.x = -(R6f.x) + intBitsToFloat(uf_remappedVS[10].x);
PS1f = R127f.x;
// 2
R126f.y = -(R5f.y) + intBitsToFloat(uf_remappedVS[10].y);
R125f.z = -(R5f.z) + intBitsToFloat(uf_remappedVS[10].z);
tempResultf = 1.0 / sqrt(PV1f.x);
R127f.w = tempResultf;
PS0f = R127f.w;
// 3
tempf.x = dot(vec4(intBitsToFloat(uf_remappedVS[11].x),intBitsToFloat(uf_remappedVS[11].y),intBitsToFloat(uf_remappedVS[11].z),-0.0),vec4(intBitsToFloat(uf_remappedVS[11].x),intBitsToFloat(uf_remappedVS[11].y),intBitsToFloat(uf_remappedVS[11].z),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R126f.z = tempf.x;
R2f.x = mul_nonIEEE(R126f.x, PS0f);
PS1f = R2f.x;
// 4
tempf.x = dot(vec4(R127f.x,R126f.y,R125f.z,-0.0),vec4(R127f.x,R126f.y,R125f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R124f.y = tempf.x;
R125f.x = -(R6f.x) + intBitsToFloat(uf_remappedVS[12].x);
PS0f = R125f.x;
// 5
backupReg0f = R127f.z;
R4f.x = mul_nonIEEE(R127f.y, R127f.w);
R125f.y = -(R5f.y) + intBitsToFloat(uf_remappedVS[12].y);
R127f.z = -(R5f.z) + intBitsToFloat(uf_remappedVS[12].z);
R2f.w = mul_nonIEEE(backupReg0f, R127f.w);
tempResultf = 1.0 / sqrt(R126f.z);
R127f.y = tempResultf;
PS1f = R127f.y;
// 6
R126f.x = dot(vec4(intBitsToFloat(uf_remappedVS[13].x),intBitsToFloat(uf_remappedVS[13].y),intBitsToFloat(uf_remappedVS[13].z),-0.0),vec4(intBitsToFloat(uf_remappedVS[13].x),intBitsToFloat(uf_remappedVS[13].y),intBitsToFloat(uf_remappedVS[13].z),0.0));
PV0f.x = R126f.x;
PV0f.y = R126f.x;
PV0f.z = R126f.x;
PV0f.w = R126f.x;
tempResultf = 1.0 / sqrt(R124f.y);
R127f.w = tempResultf;
PS0f = R127f.w;
// 7
tempf.x = dot(vec4(R125f.x,R125f.y,R127f.z,-0.0),vec4(R125f.x,R125f.y,R127f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R0f.w = tempf.x;
R124f.x = -(R6f.x) + intBitsToFloat(uf_remappedVS[14].x);
PS1f = R124f.x;
// 8
backupReg0f = R126f.y;
R0f.x = mul_nonIEEE(R127f.x, R127f.w);
R126f.y = -(R5f.y) + intBitsToFloat(uf_remappedVS[14].y);
R124f.z = -(R5f.z) + intBitsToFloat(uf_remappedVS[14].z);
R5f.w = mul_nonIEEE(backupReg0f, R127f.w);
tempResultf = 1.0 / sqrt(R126f.x);
R126f.w = tempResultf;
PS0f = R126f.w;
// 9
backupReg0f = R127f.w;
tempf.x = dot(vec4(intBitsToFloat(uf_remappedVS[15].x),intBitsToFloat(uf_remappedVS[15].y),intBitsToFloat(uf_remappedVS[15].z),-0.0),vec4(intBitsToFloat(uf_remappedVS[15].x),intBitsToFloat(uf_remappedVS[15].y),intBitsToFloat(uf_remappedVS[15].z),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R127f.w = tempf.x;
R4f.z = mul_nonIEEE(R125f.z, backupReg0f);
PS1f = R4f.z;
// 10
backupReg0f = R0f.w;
PV0f.x = mul_nonIEEE(intBitsToFloat(uf_remappedVS[11].x), R127f.y);
PV0f.y = mul_nonIEEE(intBitsToFloat(uf_remappedVS[11].y), R127f.y);
PV0f.z = mul_nonIEEE(intBitsToFloat(uf_remappedVS[11].z), R127f.y);
PV0f.w = mul_nonIEEE(R124f.z, R124f.z);
tempResultf = 1.0 / sqrt(backupReg0f);
R124f.w = tempResultf;
PS0f = R124f.w;
// 11
R126f.x = dot(vec4(R2f.x,R4f.x,R2f.w,-0.0),vec4(PV0f.x,PV0f.y,PV0f.z,0.0));
PV1f.x = R126f.x;
PV1f.y = R126f.x;
PV1f.z = R126f.x;
PV1f.w = R126f.x;
R122f.x = (mul_nonIEEE(R126f.y,R126f.y) + PV0f.w);
PS1f = R122f.x;
// 12
backupReg0f = R127f.w;
R127f.x = mul_nonIEEE(intBitsToFloat(uf_remappedVS[13].x), R126f.w);
R5f.y = (mul_nonIEEE(R124f.x,R124f.x) + PS1f);
R125f.z = mul_nonIEEE(intBitsToFloat(uf_remappedVS[13].y), R126f.w);
R127f.w = mul_nonIEEE(intBitsToFloat(uf_remappedVS[13].z), R126f.w);
tempResultf = 1.0 / sqrt(backupReg0f);
R126f.z = tempResultf;
PS0f = R126f.z;
// 13
tempf.x = dot(vec4(intBitsToFloat(uf_remappedVS[16].x),intBitsToFloat(uf_remappedVS[16].y),intBitsToFloat(uf_remappedVS[16].z),-0.0),vec4(intBitsToFloat(uf_remappedVS[16].x),intBitsToFloat(uf_remappedVS[16].y),intBitsToFloat(uf_remappedVS[16].z),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R127f.y = tempf.x;
R5f.z = sqrt(R125f.w);
PS1f = R5f.z;
// 14
backupReg0f = R0f.x;
tempf.x = dot(vec4(backupReg0f,R5f.w,R4f.z,-0.0),vec4(R127f.x,R125f.z,R127f.w,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R126f.w = tempf.x;
R7f.x = mul_nonIEEE(R125f.x, R124f.w);
PS0f = R7f.x;
// 15
R127f.x = mul_nonIEEE(intBitsToFloat(uf_remappedVS[15].x), R126f.z);
R0f.y = mul_nonIEEE(R125f.y, R124f.w);
R0f.z = mul_nonIEEE(R127f.z, R124f.w);
R124f.w = mul_nonIEEE(intBitsToFloat(uf_remappedVS[15].y), R126f.z);
tempResultf = 1.0 / sqrt(R5f.y);
R127f.w = tempResultf;
PS1f = R127f.w;
// 16
R9f.x = mul_nonIEEE(R124f.x, PS1f);
R7f.y = mul_nonIEEE(R126f.y, PS1f);
PV0f.z = mul_nonIEEE(intBitsToFloat(uf_remappedVS[15].z), R126f.z);
R4f.w = max(R126f.x, 0.0);
tempResultf = 1.0 / sqrt(R127f.y);
R125f.w = tempResultf;
PS0f = R125f.w;
// 17
backupReg0f = R0f.z;
tempf.x = dot(vec4(R7f.x,R0f.y,backupReg0f,-0.0),vec4(R127f.x,R124f.w,PV0f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R127f.y = tempf.x;
R124f.x = sqrt(R124f.y);
PS1f = R124f.x;
// 18
R127f.x = mul_nonIEEE(intBitsToFloat(uf_remappedVS[16].x), R125f.w);
R124f.y = mul_nonIEEE(intBitsToFloat(uf_remappedVS[16].y), R125f.w);
R15f.z = mul_nonIEEE(R124f.z, R127f.w);
R127f.w = mul_nonIEEE(intBitsToFloat(uf_remappedVS[16].z), R125f.w);
R2f.z = max(R126f.w, 0.0);
PS0f = R2f.z;
// 19
R126f.x = mul_nonIEEE(R5f.z, R5f.z);
R126f.y = R5f.z;
R124f.z = mul_nonIEEE(R4f.w, R4f.w);
R126f.w = R4f.w;
R5f.z = sqrt(R0f.w);
PS1f = R5f.z;
// 20
R6f.x = dot(vec4(R9f.x,R7f.y,R15f.z,-0.0),vec4(R127f.x,R124f.y,R127f.w,0.0));
PV0f.x = R6f.x;
PV0f.y = R6f.x;
PV0f.z = R6f.x;
PV0f.w = R6f.x;
R0f.w = max(R127f.y, 0.0);
PS0f = R0f.w;
// 21
tempf.x = dot(vec4(R124f.z,R126f.w,R6f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[17].z),intBitsToFloat(uf_remappedVS[17].y),intBitsToFloat(uf_remappedVS[17].x),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R4f.w = tempf.x;
R5f.x = mul_nonIEEE(R124f.x, R124f.x);
PS1f = R5f.x;
// 22
tempf.x = dot(vec4(R126f.x,R126f.y,R7f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[18].z),intBitsToFloat(uf_remappedVS[18].y),intBitsToFloat(uf_remappedVS[18].x),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R4f.y = tempf.x;
R2f.y = R124f.x;
PS0f = R2f.y;
// 0
PV0f.x = mul_nonIEEE(R2f.z, R2f.z);
PV0f.y = R2f.z;
R124f.z = mul_nonIEEE(R5f.z, R5f.z);
R126f.w = max(R6f.x, 0.0);
R126f.x = sqrt(R5f.y);
PS0f = R126f.x;
// 1
tempf.x = dot(vec4(PV0f.x,PV0f.y,R8f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[19].z),intBitsToFloat(uf_remappedVS[19].y),intBitsToFloat(uf_remappedVS[19].x),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R124f.y = tempf.x;
R127f.y = R5f.z;
PS1f = R127f.y;
// 2
tempf.x = dot(vec4(R5f.x,R2f.y,R9f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[20].z),intBitsToFloat(uf_remappedVS[20].y),intBitsToFloat(uf_remappedVS[20].x),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.w = tempf.x;
R124f.x = mul_nonIEEE(R0f.w, R0f.w);
PS0f = R124f.x;
// 3
R125f.x = mul_nonIEEE(R126f.x, R126f.x);
R126f.y = R0f.w;
PV1f.z = max(R4f.w, 0.0);
R124f.w = R126f.x;
PS1f = 1.0 / R4f.y;
// 4
tempf.x = dot(vec4(R8f.x,R6f.y,R14f.z,-0.0),vec4(R2f.x,R4f.x,R2f.w,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R125f.w = tempf.x;
R2f.w = mul_nonIEEE(PV1f.z, PS1f);
PS0f = R2f.w;
// 5
backupReg0f = R124f.x;
R124f.x = dot(vec4(backupReg0f,R126f.y,R10f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[21].z),intBitsToFloat(uf_remappedVS[21].y),intBitsToFloat(uf_remappedVS[21].x),0.0));
PV1f.x = R124f.x;
PV1f.y = R124f.x;
PV1f.z = R124f.x;
PV1f.w = R124f.x;
R126f.x = mul_nonIEEE(R126f.w, R126f.w);
PS1f = R126f.x;
// 6
tempf.x = dot(vec4(R124f.z,R127f.y,R11f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[22].z),intBitsToFloat(uf_remappedVS[22].y),intBitsToFloat(uf_remappedVS[22].x),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R124f.z = tempf.x;
R127f.y = R126f.w;
PS0f = R127f.y;
// 7
backupReg0f = R0f.x;
tempf.x = dot(vec4(R8f.x,R6f.y,R14f.z,-0.0),vec4(backupReg0f,R5f.w,R4f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R127f.x = max(R124f.y, 0.0);
PS1f = R127f.x;
// 8
backupReg0f = R124f.x;
backupReg1f = R127f.w;
R124f.x = max(backupReg0f, 0.0);
R124f.y = max(PV1f.x, 0.0);
PV0f.z = mul_nonIEEE(R12f.z, intBitsToFloat(uf_remappedVS[23].x));
R127f.w = max(R125f.w, 0.0);
PS0f = 1.0 / backupReg1f;
// 9
tempf.x = dot(vec4(R126f.x,R127f.y,PV0f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[23].z),intBitsToFloat(uf_remappedVS[23].y),1.0,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R126f.z = tempf.x;
R127f.y = mul_nonIEEE(R127f.x, PS0f);
PS1f = R127f.y;
// 10
backupReg0f = R125f.x;
R125f.x = dot(vec4(backupReg0f,R124f.w,R13f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[24].z),intBitsToFloat(uf_remappedVS[24].y),intBitsToFloat(uf_remappedVS[24].x),0.0));
PV0f.x = R125f.x;
PV0f.y = R125f.x;
PV0f.z = R125f.x;
PV0f.w = R125f.x;
R127f.z = mul_nonIEEE(R127f.w, R2f.w);
PS0f = R127f.z;
// 11
backupReg0f = R0f.y;
backupReg1f = R0f.z;
tempf.x = dot(vec4(R8f.x,R6f.y,R14f.z,-0.0),vec4(R7f.x,backupReg0f,backupReg1f,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
PS1f = 1.0 / R124f.z;
// 12
backupReg0f = R124f.y;
backupReg1f = R126f.z;
backupReg2f = R125f.x;
R125f.x = mul_nonIEEE(R124f.x, PS1f);
R124f.y = mul_nonIEEE(backupReg0f, R127f.y);
R126f.z = max(backupReg1f, 0.0);
R124f.w = max(PV1f.x, 0.0);
R127f.w = 1.0 / backupReg2f;
PS0f = R127f.w;
// 13
tempf.x = dot(vec4(R8f.x,R6f.y,R14f.z,-0.0),vec4(R9f.x,R7f.y,R15f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R127f.y = mul_nonIEEE(R127f.z, intBitsToFloat(uf_remappedVS[25].x));
PS1f = R127f.y;
// 14
PV0f.x = mul_nonIEEE(R127f.z, intBitsToFloat(uf_remappedVS[25].y));
R126f.y = mul_nonIEEE(R124f.w, R125f.x);
PV0f.z = mul_nonIEEE(R126f.z, R127f.w);
PV0f.w = mul_nonIEEE(R127f.z, intBitsToFloat(uf_remappedVS[25].z));
PS0f = max(PV1f.x, 0.0);
// 15
R123f.x = (mul_nonIEEE(R124f.y,intBitsToFloat(uf_remappedVS[26].z)) + PV0f.w);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(R124f.y,intBitsToFloat(uf_remappedVS[26].y)) + PV0f.x);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(R124f.y,intBitsToFloat(uf_remappedVS[26].x)) + R127f.y);
PV1f.z = R123f.z;
R127f.w = mul_nonIEEE(PS0f, PV0f.z);
// 16
R123f.y = (mul_nonIEEE(R126f.y,intBitsToFloat(uf_remappedVS[27].z)) + PV1f.x);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R126f.y,intBitsToFloat(uf_remappedVS[27].y)) + PV1f.y);
PV0f.z = R123f.z;
R123f.w = (mul_nonIEEE(R126f.y,intBitsToFloat(uf_remappedVS[27].x)) + PV1f.z);
PV0f.w = R123f.w;
// 17
R123f.x = (mul_nonIEEE(R127f.w,intBitsToFloat(uf_remappedVS[28].x)) + PV0f.w);
PV1f.x = R123f.x;
R123f.z = (mul_nonIEEE(R127f.w,intBitsToFloat(uf_remappedVS[28].z)) + PV0f.y);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R127f.w,intBitsToFloat(uf_remappedVS[28].y)) + PV0f.z);
PV1f.w = R123f.w;
// 18
PV0f.x = PV1f.w + intBitsToFloat(uf_remappedVS[29].y);
PV0f.y = PV1f.x + intBitsToFloat(uf_remappedVS[29].x);
PV0f.w = PV1f.z + intBitsToFloat(uf_remappedVS[29].z);
// 19
R16f.x = mul_nonIEEE(R1f.x, PV0f.y);
R16f.x = clamp(R16f.x, 0.0, 1.0);
R16f.y = mul_nonIEEE(R1f.y, PV0f.x);
R16f.y = clamp(R16f.y, 0.0, 1.0);
R16f.z = mul_nonIEEE(R1f.z, PV0f.w);
R16f.z = clamp(R16f.z, 0.0, 1.0);
// export
passParameterSem1 = vec4(R16f.x, R16f.y, R16f.z, R16f.w);
// 0
R125f.x = dot(vec4(R3f.x,R3f.y,R3f.z,R3f.w),vec4(intBitsToFloat(uf_remappedVS[30].x),intBitsToFloat(uf_remappedVS[30].y),intBitsToFloat(uf_remappedVS[30].z),intBitsToFloat(uf_remappedVS[30].w)));
PV0f.x = R125f.x;
PV0f.y = R125f.x;
PV0f.z = R125f.x;
PV0f.w = R125f.x;
// 1
tempf.x = dot(vec4(R3f.x,R3f.y,R3f.z,R3f.w),vec4(intBitsToFloat(uf_remappedVS[31].x),intBitsToFloat(uf_remappedVS[31].y),intBitsToFloat(uf_remappedVS[31].z),intBitsToFloat(uf_remappedVS[31].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R126f.y = tempf.x;
// 2
tempf.x = dot(vec4(R3f.x,R3f.y,R3f.z,R3f.w),vec4(intBitsToFloat(uf_remappedVS[32].x),intBitsToFloat(uf_remappedVS[32].y),intBitsToFloat(uf_remappedVS[32].z),intBitsToFloat(uf_remappedVS[32].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.z = tempf.x;
// 3
R3f.x = dot(vec4(R125f.x,R126f.y,PV0f.x,R6f.w),vec4(intBitsToFloat(uf_remappedVS[33].x),intBitsToFloat(uf_remappedVS[33].y),intBitsToFloat(uf_remappedVS[33].z),intBitsToFloat(uf_remappedVS[33].w)));
PV1f.x = R3f.x;
PV1f.y = R3f.x;
PV1f.z = R3f.x;
PV1f.w = R3f.x;
// 4
tempf.x = dot(vec4(R125f.x,R126f.y,R127f.z,R6f.w),vec4(intBitsToFloat(uf_remappedVS[34].x),intBitsToFloat(uf_remappedVS[34].y),intBitsToFloat(uf_remappedVS[34].z),intBitsToFloat(uf_remappedVS[34].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R3f.y = tempf.x;
// 5
tempf.x = dot(vec4(R125f.x,R126f.y,R127f.z,R6f.w),vec4(intBitsToFloat(uf_remappedVS[35].x),intBitsToFloat(uf_remappedVS[35].y),intBitsToFloat(uf_remappedVS[35].z),intBitsToFloat(uf_remappedVS[35].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R3f.z = tempf.x;
// export
passParameterSem4 = vec4(R3f.x, R3f.y, R3f.z, R3f.w);
}
