#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_packing : enable
// shader c987c3ca094bf5be
//fire mountain
const float hazeFactor = $hazeFactor;
uniform ivec4 uf_remappedVS[54];
uniform vec2 uf_windowSpaceToClipSpaceTransform;
layout(location = 0) in uvec4 attrDataSem0;
layout(location = 1) in uvec4 attrDataSem1;
layout(location = 2) in uvec4 attrDataSem2;
layout(location = 3) in uvec4 attrDataSem3;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 0) out vec4 passParameterSem1;
layout(location = 1) out vec4 passParameterSem0;
layout(location = 2) out vec4 passParameterSem2;
layout(location = 3) out vec4 passParameterSem3;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R10f = vec4(0.0);
vec4 R11f = vec4(0.0);
vec4 R12f = vec4(0.0);
vec4 R13f = vec4(0.0);
vec4 R14f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R124f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
uvec4 attrDecoder;
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = floatBitsToInt(ivec4(gl_VertexID, 0, 0, gl_InstanceID));
attrDecoder.xyz = attrDataSem0.xyz;
attrDecoder.xyz = (attrDecoder.xyz>>24)|((attrDecoder.xyz>>8)&0xFF00)|((attrDecoder.xyz<<8)&0xFF0000)|((attrDecoder.xyz<<24));
attrDecoder.w = 0;
R3f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(floatBitsToInt(1.0)));
attrDecoder.xyz = attrDataSem1.xyz;
attrDecoder.xyz = (attrDecoder.xyz>>24)|((attrDecoder.xyz>>8)&0xFF00)|((attrDecoder.xyz<<8)&0xFF0000)|((attrDecoder.xyz<<24));
attrDecoder.w = 0;
R2f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(floatBitsToInt(0.0)));
attrDecoder.xyzw = floatBitsToUint(vec4(attrDataSem2.xyzw)/255.0);
R1f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(int(attrDecoder.w)));
attrDecoder.xy = attrDataSem3.xy;
attrDecoder.xy = (attrDecoder.xy>>24)|((attrDecoder.xy>>8)&0xFF00)|((attrDecoder.xy<<8)&0xFF0000)|((attrDecoder.xy<<24));
attrDecoder.z = 0;
attrDecoder.w = 0;
R4f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(floatBitsToInt(0.0)), intBitsToFloat(floatBitsToInt(1.0)));
// 0
R14f.x = dot(vec4(R3f.x,R3f.y,R3f.z,R3f.w),vec4(intBitsToFloat(uf_remappedVS[0].x),intBitsToFloat(uf_remappedVS[0].y),intBitsToFloat(uf_remappedVS[0].z),intBitsToFloat(uf_remappedVS[0].w)));
PV0f.x = R14f.x;
PV0f.y = R14f.x;
PV0f.z = R14f.x;
PV0f.w = R14f.x;
R9f.w = R3f.w;
PS0f = R9f.w;
// 1
tempf.x = dot(vec4(R3f.x,R3f.y,R3f.z,R3f.w),vec4(intBitsToFloat(uf_remappedVS[1].x),intBitsToFloat(uf_remappedVS[1].y),intBitsToFloat(uf_remappedVS[1].z),intBitsToFloat(uf_remappedVS[1].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R13f.y = tempf.x;
R127f.x = mul_nonIEEE(R2f.z, intBitsToFloat(uf_remappedVS[1].z));
PS1f = R127f.x;
// 2
tempf.x = dot(vec4(R3f.x,R3f.y,R3f.z,R3f.w),vec4(intBitsToFloat(uf_remappedVS[2].x),intBitsToFloat(uf_remappedVS[2].y),intBitsToFloat(uf_remappedVS[2].z),intBitsToFloat(uf_remappedVS[2].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R10f.z = tempf.x;
R126f.x = mul_nonIEEE(R2f.z, intBitsToFloat(uf_remappedVS[2].z));
PS0f = R126f.x;
// 3
R125f.x = dot(vec4(R2f.x,R2f.y,R2f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[0].x),intBitsToFloat(uf_remappedVS[0].y),intBitsToFloat(uf_remappedVS[0].z),0.0));
PV1f.x = R125f.x;
PV1f.y = R125f.x;
PV1f.z = R125f.x;
PV1f.w = R125f.x;
// 4
tempf.x = dot(vec4(R2f.x,R2f.y,R127f.x,-0.0),vec4(intBitsToFloat(uf_remappedVS[1].x),intBitsToFloat(uf_remappedVS[1].y),1.0,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.y = tempf.x;
R122f.x = (mul_nonIEEE(R2f.y,intBitsToFloat(uf_remappedVS[2].y)) + R126f.x);
PS0f = R122f.x;
// 5
R127f.x = -(R14f.x) + intBitsToFloat(uf_remappedVS[3].x);
R126f.y = -(R13f.y) + intBitsToFloat(uf_remappedVS[3].y);
R127f.z = (mul_nonIEEE(R2f.x,intBitsToFloat(uf_remappedVS[2].x)) + PS0f);
PV1f.z = R127f.z;
// 6
tempf.x = dot(vec4(R125f.x,R127f.y,PV1f.z,-0.0),vec4(R125f.x,R127f.y,PV1f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R126f.z = -(R10f.z) + intBitsToFloat(uf_remappedVS[3].z);
PS0f = R126f.z;
// 7
tempf.x = dot(vec4(R127f.x,R126f.y,PS0f,-0.0),vec4(R127f.x,R126f.y,PS0f,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R125f.z = tempf.x;
tempResultf = 1.0 / sqrt(PV0f.x);
PS1f = tempResultf;
// 8
R10f.x = mul_nonIEEE(R125f.x, PS1f);
R9f.y = mul_nonIEEE(R127f.y, PS1f);
R7f.z = mul_nonIEEE(R127f.z, PS1f);
R127f.w = -(R14f.x) + intBitsToFloat(uf_remappedVS[4].x);
tempResultf = 1.0 / sqrt(PV1f.x);
PS0f = tempResultf;
// 9
R12f.x = mul_nonIEEE(R127f.x, PS0f);
R12f.y = mul_nonIEEE(R126f.y, PS0f);
R9f.z = mul_nonIEEE(R126f.z, PS0f);
R126f.w = -(R13f.y) + intBitsToFloat(uf_remappedVS[4].y);
R10f.y = sqrt(R125f.z);
PS1f = R10f.y;
// 10
R125f.x = -(R14f.x) + intBitsToFloat(uf_remappedVS[5].x);
R126f.y = -(R13f.y) + intBitsToFloat(uf_remappedVS[5].y);
R126f.z = -(R10f.z) + intBitsToFloat(uf_remappedVS[4].z);
PV0f.z = R126f.z;
// 11
R127f.x = dot(vec4(R127f.w,R126f.w,PV0f.z,-0.0),vec4(R127f.w,R126f.w,PV0f.z,0.0));
PV1f.x = R127f.x;
PV1f.y = R127f.x;
PV1f.z = R127f.x;
PV1f.w = R127f.x;
R125f.z = -(R10f.z) + intBitsToFloat(uf_remappedVS[5].z);
PS1f = R125f.z;
// 12
tempf.x = dot(vec4(R125f.x,R126f.y,PS1f,-0.0),vec4(R125f.x,R126f.y,PS1f,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.z = tempf.x;
tempResultf = 1.0 / sqrt(PV1f.x);
PS0f = tempResultf;
// 13
R11f.x = mul_nonIEEE(R127f.w, PS0f);
R11f.y = mul_nonIEEE(R126f.w, PS0f);
R8f.z = mul_nonIEEE(R126f.z, PS0f);
R127f.w = -(R14f.x) + intBitsToFloat(uf_remappedVS[6].x);
R6f.w = sqrt(R127f.x);
PS1f = R6f.w;
// 14
R5f.x = 1.0;
R127f.y = -(R13f.y) + intBitsToFloat(uf_remappedVS[6].y);
R126f.z = -(R10f.z) + intBitsToFloat(uf_remappedVS[6].z);
tempResultf = 1.0 / sqrt(R127f.z);
PS0f = tempResultf;
// 15
R9f.x = mul_nonIEEE(R125f.x, PS0f);
R8f.y = mul_nonIEEE(R126f.y, PS0f);
R6f.z = mul_nonIEEE(R125f.z, PS0f);
R126f.w = -(R14f.x) + intBitsToFloat(uf_remappedVS[7].x);
R6f.y = sqrt(R127f.z);
PS1f = R6f.y;
// 16
R125f.x = dot(vec4(R127f.w,R127f.y,R126f.z,-0.0),vec4(R127f.w,R127f.y,R126f.z,0.0));
PV0f.x = R125f.x;
PV0f.y = R125f.x;
PV0f.z = R125f.x;
PV0f.w = R125f.x;
R126f.y = -(R13f.y) + intBitsToFloat(uf_remappedVS[7].y);
PS0f = R126f.y;
// 17
R2f.x = -(R14f.x) + intBitsToFloat(uf_remappedVS[8].x);
R2f.y = -(R13f.y) + intBitsToFloat(uf_remappedVS[8].y);
R127f.z = -(R10f.z) + intBitsToFloat(uf_remappedVS[7].z);
tempResultf = 1.0 / sqrt(PV0f.x);
PS1f = tempResultf;
// 18
R8f.x = mul_nonIEEE(R127f.w, PS1f);
R7f.y = mul_nonIEEE(R127f.y, PS1f);
R5f.z = mul_nonIEEE(R126f.z, PS1f);
R3f.w = -(R10f.z) + intBitsToFloat(uf_remappedVS[8].z);
R4f.w = sqrt(R125f.x);
PS0f = R4f.w;
// 19
tempf.x = dot(vec4(R126f.w,R126f.y,R127f.z,-0.0),vec4(R126f.w,R126f.y,R127f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R126f.z = tempf.x;
R0f.x = -(R14f.x) + intBitsToFloat(uf_remappedVS[9].x);
PS1f = R0f.x;
// 20
R3f.x = dot(vec4(R2f.x,R2f.y,R3f.w,-0.0),vec4(R2f.x,R2f.y,R3f.w,0.0));
PV0f.x = R3f.x;
PV0f.y = R3f.x;
PV0f.z = R3f.x;
PV0f.w = R3f.x;
tempResultf = 1.0 / sqrt(PV1f.x);
PS0f = tempResultf;
// 21
R7f.x = mul_nonIEEE(R126f.w, PS0f);
R5f.y = mul_nonIEEE(R126f.y, PS0f);
R4f.z = mul_nonIEEE(R127f.z, PS0f);
R2f.w = -(R13f.y) + intBitsToFloat(uf_remappedVS[9].y);
R0f.y = sqrt(R126f.z);
PS1f = R0f.y;
// 22
R6f.x = 1.0;
R3f.y = 1.0;
R2f.z = -(R10f.z) + intBitsToFloat(uf_remappedVS[9].z);
tempResultf = 1.0 / sqrt(R3f.x);
R0f.w = tempResultf;
PS0f = R0f.w;
// 0
backupReg0f = R2f.x;
backupReg1f = R2f.y;
R2f.x = mul_nonIEEE(backupReg0f, R0f.w);
R2f.y = mul_nonIEEE(backupReg1f, R0f.w);
R3f.z = mul_nonIEEE(R3f.w, R0f.w);
R126f.w = -(R14f.x) + intBitsToFloat(uf_remappedVS[10].x);
R125f.w = sqrt(R3f.x);
PS0f = R125f.w;
// 1
backupReg0f = R0f.x;
backupReg0f = R0f.x;
tempf.x = dot(vec4(backupReg0f,R2f.w,R2f.z,-0.0),vec4(backupReg0f,R2f.w,R2f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R127f.z = tempf.x;
R126f.y = -(R13f.y) + intBitsToFloat(uf_remappedVS[10].y);
PS1f = R126f.y;
// 2
R3f.x = 1.0;
PV0f.y = mul_nonIEEE(intBitsToFloat(uf_remappedVS[11].z), intBitsToFloat(uf_remappedVS[11].z));
R126f.z = -(R10f.z) + intBitsToFloat(uf_remappedVS[10].z);
tempResultf = 1.0 / sqrt(PV1f.x);
PS0f = tempResultf;
// 3
R124f.x = mul_nonIEEE(R0f.x, PS0f);
R125f.y = mul_nonIEEE(R2f.w, PS0f);
R125f.z = mul_nonIEEE(R2f.z, PS0f);
R123f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[11].y),intBitsToFloat(uf_remappedVS[11].y)) + PV0f.y);
PV1f.w = R123f.w;
R127f.y = sqrt(R127f.z);
PS1f = R127f.y;
// 4
R125f.x = dot(vec4(R126f.w,R126f.y,R126f.z,-0.0),vec4(R126f.w,R126f.y,R126f.z,0.0));
PV0f.x = R125f.x;
PV0f.y = R125f.x;
PV0f.z = R125f.x;
PV0f.w = R125f.x;
R127f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[11].x),intBitsToFloat(uf_remappedVS[11].x)) + PV1f.w);
PS0f = R127f.x;
// 5
tempf.x = dot(vec4(R10f.x,R9f.y,R7f.z,-0.0),vec4(R124f.x,R125f.y,R125f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
tempResultf = 1.0 / sqrt(PV0f.x);
PS1f = tempResultf;
// 6
backupReg0f = R126f.y;
R126f.x = mul_nonIEEE(R126f.w, PS1f);
PV0f.x = R126f.x;
R126f.y = mul_nonIEEE(backupReg0f, PS1f);
PV0f.y = R126f.y;
R127f.z = mul_nonIEEE(R126f.z, PS1f);
PV0f.z = R127f.z;
R0f.w = max(PV1f.x, 0.0);
R126f.z = sqrt(R125f.x);
PS0f = R126f.z;
// 7
tempf.x = dot(vec4(R10f.x,R9f.y,R7f.z,-0.0),vec4(PV0f.x,PV0f.y,PV0f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R125f.x = mul_nonIEEE(PS0f, PS0f);
PS1f = R125f.x;
// 8
backupReg0f = R127f.y;
backupReg0f = R127f.y;
backupReg0f = R127f.y;
PV0f.x = R126f.z;
R127f.y = max(PV1f.x, 0.0);
R126f.z = mul_nonIEEE(backupReg0f, backupReg0f);
R126f.w = backupReg0f;
tempResultf = 1.0 / sqrt(R127f.x);
R127f.w = tempResultf;
PS0f = R127f.w;
// 9
tempf.x = dot(vec4(R125f.x,PV0f.x,R5f.x,-0.0),vec4(intBitsToFloat(uf_remappedVS[12].z),intBitsToFloat(uf_remappedVS[12].y),intBitsToFloat(uf_remappedVS[12].x),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R125f.x = mul_nonIEEE(R125f.w, R125f.w);
PS1f = R125f.x;
// 10
tempf.x = dot(vec4(R126f.z,R126f.w,R3f.y,-0.0),vec4(intBitsToFloat(uf_remappedVS[13].z),intBitsToFloat(uf_remappedVS[13].y),intBitsToFloat(uf_remappedVS[13].x),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R126f.z = 1.0 / PV1f.x;
PS0f = R126f.z;
// 11
PV1f.x = mul_nonIEEE(intBitsToFloat(uf_remappedVS[11].x), R127f.w);
PV1f.y = mul_nonIEEE(intBitsToFloat(uf_remappedVS[11].y), R127f.w);
PV1f.z = mul_nonIEEE(intBitsToFloat(uf_remappedVS[11].z), R127f.w);
R127f.w = R125f.w;
R0f.x = 1.0 / PV0f.x;
PS1f = R0f.x;
// 12
tempf.x = dot(vec4(R126f.x,R126f.y,R127f.z,-0.0),vec4(PV1f.x,PV1f.y,PV1f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
PS0f = 1.0;
// 13
tempf.x = dot(vec4(R125f.x,R127f.w,PS0f,-0.0),vec4(intBitsToFloat(uf_remappedVS[14].z),intBitsToFloat(uf_remappedVS[14].y),intBitsToFloat(uf_remappedVS[14].x),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
PS1f = max(PV0f.x, 0.0);
// 14
PV0f.x = mul_nonIEEE(PS1f, PS1f);
PV0f.y = PS1f;
R0f.z = 1.0;
R127f.w = mul_nonIEEE(intBitsToFloat(uf_remappedVS[15].z), intBitsToFloat(uf_remappedVS[15].z));
R3f.y = 1.0 / PV1f.x;
PS0f = R3f.y;
// 15
backupReg0f = R0f.y;
backupReg0f = R0f.y;
tempf.x = dot(vec4(PV0f.x,PV0f.y,R6f.x,-0.0),vec4(intBitsToFloat(uf_remappedVS[16].z),intBitsToFloat(uf_remappedVS[16].y),intBitsToFloat(uf_remappedVS[16].x),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R125f.x = mul_nonIEEE(backupReg0f, backupReg0f);
PS1f = R125f.x;
// 16
backupReg0f = R0f.y;
backupReg1f = R127f.w;
PV0f.x = max(PV1f.x, 0.0);
PV0f.y = backupReg0f;
PV0f.z = 1.0;
R127f.w = mul_nonIEEE(R7f.z, R3f.z);
R126f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[15].y),intBitsToFloat(uf_remappedVS[15].y)) + backupReg1f);
PS0f = R126f.x;
// 17
R5f.x = dot(vec4(R125f.x,PV0f.y,PV0f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[17].z),intBitsToFloat(uf_remappedVS[17].y),intBitsToFloat(uf_remappedVS[17].x),0.0));
PV1f.x = R5f.x;
PV1f.y = R5f.x;
PV1f.z = R5f.x;
PV1f.w = R5f.x;
PS1f = mul_nonIEEE(PV0f.x, R126f.z);
// 18
R13f.x = mul_nonIEEE(R127f.y, PS1f);
PV0f.y = mul_nonIEEE(intBitsToFloat(uf_remappedVS[18].z), intBitsToFloat(uf_remappedVS[18].z));
PV0f.z = mul_nonIEEE(R7f.z, R4f.z);
R123f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[15].x),intBitsToFloat(uf_remappedVS[15].x)) + R126f.x);
PV0f.w = R123f.w;
R122f.x = (mul_nonIEEE(R9f.y,R2f.y) + R127f.w);
PS0f = R122f.x;
// 19
R126f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[18].y),intBitsToFloat(uf_remappedVS[18].y)) + PV0f.y);
R123f.y = (mul_nonIEEE(R10f.x,R2f.x) + PS0f);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(R9f.y,R5f.y) + PV0f.z);
PV1f.z = R123f.z;
R5f.w = 1.0;
tempResultf = 1.0 / sqrt(PV0f.w);
PS1f = tempResultf;
// 20
PV0f.x = mul_nonIEEE(intBitsToFloat(uf_remappedVS[15].x), PS1f);
PV0f.y = mul_nonIEEE(intBitsToFloat(uf_remappedVS[15].y), PS1f);
PV0f.z = mul_nonIEEE(intBitsToFloat(uf_remappedVS[15].z), PS1f);
R3f.w = max(PV1f.y, 0.0);
R2f.z = (mul_nonIEEE(R10f.x,R7f.x) + PV1f.z);
PS0f = R2f.z;
// 21
R6f.x = dot(vec4(R124f.x,R125f.y,R125f.z,-0.0),vec4(PV0f.x,PV0f.y,PV0f.z,0.0));
PV1f.x = R6f.x;
PV1f.y = R6f.x;
PV1f.z = R6f.x;
PV1f.w = R6f.x;
R2f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[18].x),intBitsToFloat(uf_remappedVS[18].x)) + R126f.x);
PS1f = R2f.w;
// 0
R125f.x = max(R2f.z, 0.0);
R125f.y = mul_nonIEEE(intBitsToFloat(uf_remappedVS[19].z), intBitsToFloat(uf_remappedVS[19].z));
PV0f.w = max(R6f.x, 0.0);
tempResultf = 1.0 / sqrt(R2f.w);
PS0f = tempResultf;
// 1
R126f.x = mul_nonIEEE(PV0f.w, PV0f.w);
R127f.y = PV0f.w;
PV1f.z = mul_nonIEEE(intBitsToFloat(uf_remappedVS[18].x), PS0f);
PV1f.w = mul_nonIEEE(intBitsToFloat(uf_remappedVS[18].y), PS0f);
PS1f = mul_nonIEEE(intBitsToFloat(uf_remappedVS[18].z), PS0f);
// 2
tempf.x = dot(vec4(R2f.x,R2f.y,R3f.z,-0.0),vec4(PV1f.z,PV1f.w,PS1f,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R124f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[19].y),intBitsToFloat(uf_remappedVS[19].y)) + R125f.y);
PS0f = R124f.x;
// 3
tempf.x = dot(vec4(R126f.x,R127f.y,R3f.x,-0.0),vec4(intBitsToFloat(uf_remappedVS[20].z),intBitsToFloat(uf_remappedVS[20].y),intBitsToFloat(uf_remappedVS[20].x),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
PS1f = max(PV0f.x, 0.0);
// 4
PV0f.x = mul_nonIEEE(PS1f, PS1f);
PV0f.y = PS1f;
R125f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[19].x),intBitsToFloat(uf_remappedVS[19].x)) + R124f.x);
PV0f.w = max(PV1f.x, 0.0);
R127f.z = 1.0 / R5f.x;
PS0f = R127f.z;
// 5
backupReg0f = R0f.z;
backupReg1f = R0f.x;
tempf.x = dot(vec4(PV0f.x,PV0f.y,backupReg0f,-0.0),vec4(intBitsToFloat(uf_remappedVS[21].z),intBitsToFloat(uf_remappedVS[21].y),intBitsToFloat(uf_remappedVS[21].x),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
PS1f = mul_nonIEEE(PV0f.w, backupReg1f);
// 6
backupReg0f = R125f.z;
PV0f.x = max(PV1f.x, 0.0);
R127f.y = mul_nonIEEE(R4f.w, R4f.w);
R125f.z = R4f.w;
R8f.w = mul_nonIEEE(R0f.w, PS1f);
tempResultf = 1.0 / sqrt(backupReg0f);
PS0f = tempResultf;
// 7
PV1f.x = mul_nonIEEE(PV0f.x, R3f.y);
PV1f.y = mul_nonIEEE(intBitsToFloat(uf_remappedVS[19].x), PS0f);
PV1f.z = mul_nonIEEE(intBitsToFloat(uf_remappedVS[19].y), PS0f);
PV1f.w = mul_nonIEEE(intBitsToFloat(uf_remappedVS[19].z), PS0f);
R126f.z = 1.0;
PS1f = R126f.z;
// 8
tempf.x = dot(vec4(R7f.x,R5f.y,R4f.z,-0.0),vec4(PV1f.y,PV1f.z,PV1f.w,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R7f.w = mul_nonIEEE(R3f.w, PV1f.x);
PS0f = R7f.w;
// 9
tempf.x = dot(vec4(R127f.y,R125f.z,R126f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[22].z),intBitsToFloat(uf_remappedVS[22].y),intBitsToFloat(uf_remappedVS[22].x),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
PS1f = max(PV0f.x, 0.0);
// 10
PV0f.x = mul_nonIEEE(PS1f, PS1f);
PV0f.y = PS1f;
R4f.z = 1.0;
R127f.w = mul_nonIEEE(R6f.y, R6f.y);
R5f.x = 1.0 / PV1f.x;
PS0f = R5f.x;
// 11
tempf.x = dot(vec4(PV0f.x,PV0f.y,R5f.w,-0.0),vec4(intBitsToFloat(uf_remappedVS[23].z),intBitsToFloat(uf_remappedVS[23].y),intBitsToFloat(uf_remappedVS[23].x),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R127f.y = R6f.y;
PS1f = R127f.y;
// 12
R0f.x = 1.0;
PV0f.y = max(PV1f.x, 0.0);
PV0f.z = 1.0;
R125f.w = mul_nonIEEE(R6f.w, R6f.w);
R125f.y = R6f.w;
PS0f = R125f.y;
// 13
tempf.x = dot(vec4(R127f.w,R127f.y,PV0f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[24].z),intBitsToFloat(uf_remappedVS[24].y),intBitsToFloat(uf_remappedVS[24].x),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
PS1f = mul_nonIEEE(PV0f.y, R127f.z);
// 14
PV0f.x = mul_nonIEEE(R7f.z, R5f.z);
R6f.y = mul_nonIEEE(R125f.x, PS1f);
PV0f.z = 1.0;
R127f.w = mul_nonIEEE(intBitsToFloat(uf_remappedVS[25].z), intBitsToFloat(uf_remappedVS[25].z));
R5f.w = 1.0 / PV1f.x;
PS0f = R5f.w;
// 15
R125f.x = dot(vec4(R125f.w,R125f.y,PV0f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[26].z),intBitsToFloat(uf_remappedVS[26].y),intBitsToFloat(uf_remappedVS[26].x),0.0));
PV1f.x = R125f.x;
PV1f.y = R125f.x;
PV1f.z = R125f.x;
PV1f.w = R125f.x;
R122f.x = (mul_nonIEEE(R9f.y,R7f.y) + PV0f.x);
PS1f = R122f.x;
// 16
R123f.x = (mul_nonIEEE(R10f.x,R8f.x) + PS1f);
PV0f.x = R123f.x;
PV0f.y = mul_nonIEEE(R7f.z, R6f.z);
PV0f.z = mul_nonIEEE(intBitsToFloat(uf_remappedVS[27].z), intBitsToFloat(uf_remappedVS[27].z));
PV0f.w = mul_nonIEEE(R7f.z, R8f.z);
R122f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[25].y),intBitsToFloat(uf_remappedVS[25].y)) + R127f.w);
PS0f = R122f.x;
// 17
R123f.x = (mul_nonIEEE(R9f.y,R8f.y) + PV0f.y);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(R9f.y,R11f.y) + PV0f.w);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[25].x),intBitsToFloat(uf_remappedVS[25].x)) + PS0f);
PV1f.z = R123f.z;
R6f.w = max(PV0f.x, 0.0);
R122f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[27].y),intBitsToFloat(uf_remappedVS[27].y)) + PV0f.z);
PS1f = R122f.x;
// 18
R123f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[27].x),intBitsToFloat(uf_remappedVS[27].x)) + PS1f);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R10f.x,R9f.x) + PV1f.x);
PV0f.y = R123f.y;
R127f.z = (mul_nonIEEE(R10f.x,R11f.x) + PV1f.y);
R0f.w = 1.0;
tempResultf = 1.0 / sqrt(PV1f.z);
PS0f = tempResultf;
// 19
PV1f.x = mul_nonIEEE(intBitsToFloat(uf_remappedVS[25].x), PS0f);
PV1f.y = mul_nonIEEE(intBitsToFloat(uf_remappedVS[25].y), PS0f);
PV1f.z = mul_nonIEEE(intBitsToFloat(uf_remappedVS[25].z), PS0f);
R3f.w = max(PV0f.y, 0.0);
tempResultf = 1.0 / sqrt(PV0f.x);
R127f.w = tempResultf;
PS1f = R127f.w;
// 20
tempf.x = dot(vec4(R8f.x,R7f.y,R5f.z,-0.0),vec4(PV1f.x,PV1f.y,PV1f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R8f.x = mul_nonIEEE(intBitsToFloat(uf_remappedVS[27].x), PS1f);
PS0f = R8f.x;
// 21
R7f.x = max(PV0f.x, 0.0);
R7f.y = mul_nonIEEE(intBitsToFloat(uf_remappedVS[27].y), R127f.w);
R5f.z = mul_nonIEEE(intBitsToFloat(uf_remappedVS[27].z), R127f.w);
R2f.w = max(R127f.z, 0.0);
R4f.w = 1.0 / R125f.x;
PS1f = R4f.w;
// 0
tempf.x = dot(vec4(R9f.x,R8f.y,R6f.z,-0.0),vec4(R8f.x,R7f.y,R5f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R125f.x = mul_nonIEEE(R7f.x, R7f.x);
PS0f = R125f.x;
// 1
R124f.x = mul_nonIEEE(intBitsToFloat(uf_remappedVS[28].z), intBitsToFloat(uf_remappedVS[28].z));
PV1f.y = R7f.x;
R127f.w = max(PV0f.x, 0.0);
PS1f = mul_nonIEEE(R7f.z, R9f.z);
// 2
tempf.x = dot(vec4(R125f.x,PV1f.y,R4f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[29].z),intBitsToFloat(uf_remappedVS[29].y),intBitsToFloat(uf_remappedVS[29].x),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R122f.x = (mul_nonIEEE(R9f.y,R12f.y) + PS1f);
PS0f = R122f.x;
// 3
backupReg0f = R124f.x;
R125f.x = (mul_nonIEEE(R10f.x,R12f.x) + PS0f);
PV1f.y = mul_nonIEEE(R127f.w, R127f.w);
PV1f.z = max(PV0f.x, 0.0);
PV1f.w = R127f.w;
R124f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[28].y),intBitsToFloat(uf_remappedVS[28].y)) + backupReg0f);
PS1f = R124f.x;
// 4
backupReg0f = R0f.x;
tempf.x = dot(vec4(PV1f.y,PV1f.w,backupReg0f,-0.0),vec4(intBitsToFloat(uf_remappedVS[30].z),intBitsToFloat(uf_remappedVS[30].y),intBitsToFloat(uf_remappedVS[30].x),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
PS0f = mul_nonIEEE(PV1f.z, R5f.x);
// 5
PV1f.x = max(PV0f.x, 0.0);
R123f.y = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[28].x),intBitsToFloat(uf_remappedVS[28].x)) + R124f.x);
PV1f.y = R123f.y;
R127f.z = mul_nonIEEE(R6f.w, PS0f);
R126f.w = max(R125f.x, 0.0);
R125f.x = mul_nonIEEE(R10f.y, R10f.y);
PS1f = R125f.x;
// 6
PV0f.x = R10f.y;
PV0f.y = mul_nonIEEE(PV1f.x, R5f.w);
PV0f.z = 1.0;
R125f.w = 1.0;
tempResultf = 1.0 / sqrt(PV1f.y);
R127f.w = tempResultf;
PS0f = R127f.w;
// 7
tempf.x = dot(vec4(R125f.x,PV0f.x,PV0f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[31].z),intBitsToFloat(uf_remappedVS[31].y),intBitsToFloat(uf_remappedVS[31].x),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R124f.x = mul_nonIEEE(R3f.w, PV0f.y);
PS1f = R124f.x;
// 8
PV0f.x = mul_nonIEEE(intBitsToFloat(uf_remappedVS[28].x), R127f.w);
PV0f.y = mul_nonIEEE(intBitsToFloat(uf_remappedVS[28].y), R127f.w);
PV0f.z = mul_nonIEEE(intBitsToFloat(uf_remappedVS[28].z), R127f.w);
R125f.y = 1.0 / PV1f.x;
PS0f = R125f.y;
// 9
tempf.x = dot(vec4(R11f.x,R11f.y,R8f.z,-0.0),vec4(PV0f.x,PV0f.y,PV0f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
PS1f = mul_nonIEEE(intBitsToFloat(uf_remappedVS[32].z), intBitsToFloat(uf_remappedVS[32].z));
// 10
R123f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[32].y),intBitsToFloat(uf_remappedVS[32].y)) + PS1f);
PV0f.x = R123f.x;
PV0f.w = max(PV1f.x, 0.0);
// 11
PV1f.x = mul_nonIEEE(PV0f.w, PV0f.w);
PV1f.y = PV0f.w;
R123f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[32].x),intBitsToFloat(uf_remappedVS[32].x)) + PV0f.x);
PV1f.z = R123f.z;
// 12
tempf.x = dot(vec4(PV1f.x,PV1f.y,R0f.w,-0.0),vec4(intBitsToFloat(uf_remappedVS[33].z),intBitsToFloat(uf_remappedVS[33].y),intBitsToFloat(uf_remappedVS[33].x),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
tempResultf = 1.0 / sqrt(PV1f.z);
PS0f = tempResultf;
// 13
PV1f.x = mul_nonIEEE(intBitsToFloat(uf_remappedVS[32].x), PS0f);
PV1f.y = max(PV0f.x, 0.0);
PV1f.z = mul_nonIEEE(intBitsToFloat(uf_remappedVS[32].y), PS0f);
PV1f.w = mul_nonIEEE(intBitsToFloat(uf_remappedVS[32].z), PS0f);
// 14
tempf.x = dot(vec4(R12f.x,R12f.y,R9f.z,-0.0),vec4(PV1f.x,PV1f.z,PV1f.w,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
PS0f = mul_nonIEEE(PV1f.y, R4f.w);
// 15
R127f.y = mul_nonIEEE(R2f.w, PS0f);
R8f.z = 1.0;
PV1f.z = R8f.z;
PV1f.w = max(PV0f.x, 0.0);
R2f.w = R1f.w;
PS1f = R2f.w;
// 16
PV0f.x = mul_nonIEEE(PV1f.w, PV1f.w);
PV0f.y = PV1f.w;
PV0f.z = 1.0;
R127f.w = 1.0;
R125f.x = mul_nonIEEE(PV1f.z, intBitsToFloat(uf_remappedVS[34].w));
PS0f = R125f.x;
// 17
tempf.x = dot(vec4(PV0f.x,PV0f.y,R125f.w,-0.0),vec4(intBitsToFloat(uf_remappedVS[35].z),intBitsToFloat(uf_remappedVS[35].y),intBitsToFloat(uf_remappedVS[35].x),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R0f.z = PV0f.z;
PS1f = R0f.z;
// 18
R123f.x = (mul_nonIEEE(R8f.z,intBitsToFloat(uf_remappedVS[34].z)) + R125f.x);
PV0f.x = R123f.x;
PV0f.z = max(PV1f.x, 0.0);
R3f.w = R127f.w;
PS0f = mul_nonIEEE(R8f.z, intBitsToFloat(uf_remappedVS[36].w));
// 19
PV1f.x = mul_nonIEEE(PV0f.z, R125f.y);
R123f.y = (mul_nonIEEE(R8f.z,intBitsToFloat(uf_remappedVS[36].z)) + PS0f);
PV1f.y = R123f.y;
R122f.x = (mul_nonIEEE(R4f.y,intBitsToFloat(uf_remappedVS[34].y)) + PV0f.x);
PS1f = R122f.x;
// 20
R11f.x = (mul_nonIEEE(R4f.y,intBitsToFloat(uf_remappedVS[36].y)) + PV1f.y);
PV0f.z = mul_nonIEEE(R126f.w, PV1f.x);
R123f.w = (mul_nonIEEE(R4f.x,intBitsToFloat(uf_remappedVS[34].x)) + PS1f);
PV0f.w = R123f.w;
// 21
PV1f.x = mul_nonIEEE(PV0f.z, intBitsToFloat(uf_remappedVS[37].z));
PV1f.y = mul_nonIEEE(PV0f.z, intBitsToFloat(uf_remappedVS[37].y));
PV1f.w = mul_nonIEEE(PV0f.z, intBitsToFloat(uf_remappedVS[37].x));
R0f.x = PV0f.w;
PS1f = R0f.x;
// 22
R123f.y = (mul_nonIEEE(R127f.y,intBitsToFloat(uf_remappedVS[38].z)) + PV1f.x);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R127f.y,intBitsToFloat(uf_remappedVS[38].x)) + PV1f.w);
PV0f.z = R123f.z;
R123f.w = (mul_nonIEEE(R127f.y,intBitsToFloat(uf_remappedVS[38].y)) + PV1f.y);
PV0f.w = R123f.w;
// 23
R123f.x = (mul_nonIEEE(R124f.x,intBitsToFloat(uf_remappedVS[39].x)) + PV0f.z);
PV1f.x = R123f.x;
R123f.z = (mul_nonIEEE(R124f.x,intBitsToFloat(uf_remappedVS[39].y)) + PV0f.w);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R124f.x,intBitsToFloat(uf_remappedVS[39].z)) + PV0f.y);
PV1f.w = R123f.w;
// 24
R123f.x = (mul_nonIEEE(R127f.z,intBitsToFloat(uf_remappedVS[40].y)) + PV1f.z);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R127f.z,intBitsToFloat(uf_remappedVS[40].x)) + PV1f.x);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R127f.z,intBitsToFloat(uf_remappedVS[40].z)) + PV1f.w);
PV0f.z = R123f.z;
// 25
R123f.x = (mul_nonIEEE(R6f.y,intBitsToFloat(uf_remappedVS[41].z)) + PV0f.z);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(R6f.y,intBitsToFloat(uf_remappedVS[41].y)) + PV0f.x);
PV1f.y = R123f.y;
R123f.w = (mul_nonIEEE(R6f.y,intBitsToFloat(uf_remappedVS[41].x)) + PV0f.y);
PV1f.w = R123f.w;
// 26
R123f.y = (mul_nonIEEE(R7f.w,intBitsToFloat(uf_remappedVS[42].z)) + PV1f.x);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R7f.w,intBitsToFloat(uf_remappedVS[42].x)) + PV1f.w);
PV0f.z = R123f.z;
R123f.w = (mul_nonIEEE(R7f.w,intBitsToFloat(uf_remappedVS[42].y)) + PV1f.y);
PV0f.w = R123f.w;
// 27
backupReg0f = R8f.w;
R12f.x = (mul_nonIEEE(R8f.w,intBitsToFloat(uf_remappedVS[43].x)) + PV0f.z);
R9f.z = (mul_nonIEEE(R8f.w,intBitsToFloat(uf_remappedVS[43].y)) + PV0f.w);
R8f.w = (mul_nonIEEE(backupReg0f,intBitsToFloat(uf_remappedVS[43].z)) + PV0f.y);
// 0
R123f.x = (mul_nonIEEE(R13f.x,intBitsToFloat(uf_remappedVS[44].y)) + R9f.z);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R13f.x,intBitsToFloat(uf_remappedVS[44].x)) + R12f.x);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R13f.x,intBitsToFloat(uf_remappedVS[44].z)) + R8f.w);
PV0f.z = R123f.z;
// 1
PV1f.x = PV0f.z + intBitsToFloat(uf_remappedVS[45].z);
PV1f.y = PV0f.x + intBitsToFloat(uf_remappedVS[45].y);
PV1f.w = PV0f.y + intBitsToFloat(uf_remappedVS[45].x);
// 2
R2f.x = mul_nonIEEE(R1f.x, PV1f.w);
R2f.x = clamp(R2f.x, 0.0, 1.0);
R2f.y = mul_nonIEEE(R1f.y, PV1f.y);
R2f.y = clamp(R2f.y, 0.0, 1.0);
R2f.z = mul_nonIEEE(R1f.z, PV1f.x);
R2f.z = clamp(R2f.z, 0.0, 1.0);
PV0f.w = intBitsToFloat(uf_remappedVS[46].w) * intBitsToFloat(0x3d430c31);
R126f.w = intBitsToFloat(uf_remappedVS[46].w) + intBitsToFloat(0xc1a80000);
PS0f = R126f.w;
// 3
R1f.x = dot(vec4(R14f.x,R13f.y,R10f.z,R9f.w),vec4(intBitsToFloat(uf_remappedVS[47].x),intBitsToFloat(uf_remappedVS[47].y),intBitsToFloat(uf_remappedVS[47].z),intBitsToFloat(uf_remappedVS[47].w)));
PV1f.x = R1f.x;
PV1f.y = R1f.x;
PV1f.z = R1f.x;
PV1f.w = R1f.x;
R124f.x = floor(PV0f.w);
PS1f = R124f.x;
// 4
tempf.x = dot(vec4(R14f.x,R13f.y,R10f.z,R9f.w),vec4(intBitsToFloat(uf_remappedVS[48].x),intBitsToFloat(uf_remappedVS[48].y),intBitsToFloat(uf_remappedVS[48].z),intBitsToFloat(uf_remappedVS[48].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R1f.y = tempf.x;
R122f.x = (R126f.w * intBitsToFloat(0x3d430c31) + 1.0);
PS0f = R122f.x;
// 5
tempf.x = dot(vec4(R14f.x,R13f.y,R10f.z,R9f.w),vec4(intBitsToFloat(uf_remappedVS[49].x),intBitsToFloat(uf_remappedVS[49].y),intBitsToFloat(uf_remappedVS[49].z),intBitsToFloat(uf_remappedVS[49].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R1f.z = tempf.x;
R127f.y = floor(PS0f);
PS1f = R127f.y;
// 6
tempf.x = dot(vec4(R14f.x,R13f.y,R10f.z,R9f.w),vec4(intBitsToFloat(uf_remappedVS[50].x),intBitsToFloat(uf_remappedVS[50].y),intBitsToFloat(uf_remappedVS[50].z),intBitsToFloat(uf_remappedVS[50].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R1f.w = tempf.x;
R127f.z = R124f.x * intBitsToFloat(0x3d4ccccd);
PS0f = R127f.z;
// 7
R123f.x = (-(R127f.y) * intBitsToFloat(0x41a80000) + intBitsToFloat(uf_remappedVS[46].w));
PV1f.x = R123f.x;
R9f.y = intBitsToFloat(uf_remappedVS[51].y);
PS1f = 1.0 / PV0f.x;
PS1f /= 2.0;
// 8
R9f.x = intBitsToFloat(uf_remappedVS[51].x);
R123f.y = (mul_nonIEEE(R1f.z,PS1f) + 0.5);
PV0f.y = R123f.y;
R9f.z = intBitsToFloat(uf_remappedVS[51].z);
R126f.w = PV1f.x * intBitsToFloat(0x3d4ccccd);
R127f.y = 1.0 / R127f.z;
PS0f = R127f.y;
// 9
PV1f.x = -(PV0f.y) + intBitsToFloat(uf_remappedVS[46].y);
// 10
PS0f = 1.0 / PV1f.x;
// 11
R123f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[46].x),PS0f) + -(intBitsToFloat(uf_remappedVS[46].z)));
PV1f.z = R123f.z;
// 12
PV0f.x = mul_nonIEEE(PV1f.z, R127f.y);
PV0f.x = clamp(PV0f.x, 0.0, 1.0);
// 13
R9f.w = mul_nonIEEE(R126f.w, PV0f.x);
// export
passParameterSem1 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);
// export
passParameterSem0 = vec4(R9f.x, R9f.y, R9f.z, R9f.w) * hazeFactor;
// export
gl_Position = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
// 0
PV0f.x = mul_nonIEEE(R8f.z, intBitsToFloat(uf_remappedVS[52].w));
R123f.z = (mul_nonIEEE(R4f.x,intBitsToFloat(uf_remappedVS[36].x)) + R11f.x);
PV0f.z = R123f.z;
// 1
R124f.x = (mul_nonIEEE(R8f.z,intBitsToFloat(uf_remappedVS[52].z)) + PV0f.x);
R0f.y = PV0f.z;
PS1f = mul_nonIEEE(R8f.z, intBitsToFloat(uf_remappedVS[53].w));
// 2
tempf.x = dot(vec4(R4f.x,R4f.y,R8f.z,PS1f),vec4(intBitsToFloat(uf_remappedVS[53].x),intBitsToFloat(uf_remappedVS[53].y),intBitsToFloat(uf_remappedVS[53].z),1.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
// 3
tempf.x = dot(vec4(R4f.x,R4f.y,R124f.x,0.0),vec4(intBitsToFloat(uf_remappedVS[52].x),intBitsToFloat(uf_remappedVS[52].y),1.0,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R3f.y = PV0f.x;
PS1f = R3f.y;
// 4
R3f.x = PV1f.x;
// export
passParameterSem2 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
// export
passParameterSem3 = vec4(R3f.x, R3f.y, R3f.w, R3f.w);
}
