#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 6e2f31b2b2fcab1f
//old contrasty, or just copy paste clarity
const float bloom = 0.9; //bloom ammount
const float gamma = 0.5; // 1.0 is neutral  Botw is already colour graded at this stage
const float exposure = 1.5; // 1.0 is neutral
const float vibrance = 0.1175;  // 0.0 is neutral  
const float crushContrast = 0.1; // 0.0 is neutral. Use small increments, loss of shadow detail 

vec3 contrasty(vec3 colour){
	vec3 fColour = (colour.xyz);
	
	fColour = clamp(exposure * fColour, 0.0, 1.0);
	fColour = pow(fColour, vec3(1.0 / gamma));
	//float luminance = fColour.r*0.299 + fColour.g*0.587 + fColour.b*0.114;
	float luminance = fColour.r*0.299 + fColour.g*0.587 + fColour.b*0.114;
	float mn = min(min(fColour.r, fColour.g), fColour.b);
	float mx = max(max(fColour.r, fColour.g), fColour.b);
	float sat = (1.0 - (mx - mn)) * (1.0 - mx) * luminance * 5.0;
	vec3 lightness = vec3((mn + mx) / 2.0);
// vibrance
	fColour = mix(fColour, mix(fColour, lightness, -vibrance), sat);
	fColour = max(vec3(0.0), fColour - vec3(crushContrast));
	return fColour;
}

uniform ivec4 uf_remappedPS[1];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x24dfb000 res 960x540x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 0
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw);
// 0
backupReg0f = R0f.x;
backupReg1f = R0f.y;
R0f.x = backupReg0f * intBitsToFloat(0x3b088889);
R0f.y = backupReg1f * intBitsToFloat(0x3b72b9d6);
R1f.w = 0.0;
R0f.xyz = (textureLod(textureUnitPS0, R0f.xy,0.0).xyz)*bloom;
// 0
backupReg0f = R0f.x;
backupReg1f = R0f.y;
backupReg2f = R0f.z;
tempf.x = dot(vec4(backupReg0f,backupReg1f,backupReg2f,-0.0),vec4(intBitsToFloat(0x3e991687),intBitsToFloat(0x3f1645a2),intBitsToFloat(0x3de978d5),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
// 1
PV1f.y = PV0f.x + -(intBitsToFloat(uf_remappedPS[0].x));
// 2
PV0f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].y), PV1f.y);
// 3
R1f.x = mul_nonIEEE(PV0f.x, R0f.x);
R1f.x = clamp(R1f.x, 0.0, 1.0);
R1f.y = mul_nonIEEE(PV0f.x, R0f.y);
R1f.y = clamp(R1f.y, 0.0, 1.0);
R1f.z = mul_nonIEEE(PV0f.x, R0f.z);
R1f.z = clamp(R1f.z, 0.0, 1.0);
// export
R1f.xyz = contrasty(R1f.xyz);
passPixelColor0 = vec4(R1f.x*0.7, R1f.y, R1f.z*1.4, R1f.w);
}
