#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader afa7dc4b804ad02f // sky
const float redScale = $redScale; 
const float greenScale = $greenScale; 
const float blueScale = $blueScale;
const float hazeFactor = $hazeFactor;


//old contrasty, or just copy paste clarity
const float gamma = $gamma; // 1.0 is neutral  Botw is already colour graded at this stage
const float exposure = $exposure; // 1.0 is neutral
const float vibrance = $vibrance;  // 0.0 is neutral  
const float crushContrast = $crushContrast; // 0.0 is neutral. Use small increments, loss of shadow detail 

vec3 contrasty(vec3 colour){
	vec3 fColour = (colour.xyz);
fColour.x = fColour.x *redScale;
fColour.y = fColour.y *greenScale;
fColour.z = fColour.z *blueScale;
	
	fColour = clamp(exposure * fColour, 0.0, 1.0);
	fColour = pow(fColour, vec3(1.0 / gamma));
	float luminance = fColour.r*0.299 + fColour.g*0.587 + fColour.b*0.114;
	float mn = min(min(fColour.r, fColour.g), fColour.b);
	float mx = max(max(fColour.r, fColour.g), fColour.b);
	float sat = (1.0 - (mx - mn)) * (1.0 - mx) * luminance * 5.0;
	vec3 lightness = vec3((mn + mx) / 2.0);
// vibrance
	fColour = mix(fColour, mix(fColour, lightness, -vibrance), sat);
	fColour = max(vec3(0.0), fColour - vec3(crushContrast));
	return fColour;
}

uniform ivec4 uf_remappedPS[1];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x2f74d800 res 64x64x1 dim 1 tm: 4 format 0001 compSel: 0 0 0 0 mipView: 0x0 (num 0x7) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R1f.xyz = (texture(textureUnitPS0, R1f.xy).xyz);
// 0
backupReg0f = R0f.w;
PV0f.x = intBitsToFloat(uf_remappedPS[0].x) * intBitsToFloat(0x3f7f0000);
PV0f.y = intBitsToFloat(uf_remappedPS[0].w) * intBitsToFloat(0x3f7f0000);
PV0f.z = intBitsToFloat(uf_remappedPS[0].z) * intBitsToFloat(0x3f7f0000);
PV0f.w = intBitsToFloat(uf_remappedPS[0].y) * intBitsToFloat(0x3f7f0000);
R127f.x = backupReg0f * intBitsToFloat(0x3f808081);
PS0f = R127f.x;
// 1
PV1f.x = fract(PV0f.w);
PV1f.y = fract(PV0f.x);
PV1f.z = fract(PV0f.y);
PV1f.w = fract(PV0f.z);
// 2
PV0f.y = PV1f.x * intBitsToFloat(0x3f808081);
PV0f.z = PV1f.y * intBitsToFloat(0x3f808081);
PV0f.w = PV1f.w * intBitsToFloat(0x3f808081);
R0f.w = mul_nonIEEE(PV1f.z, R127f.x);
R0f.w = clamp(R0f.w, 0.0, 1.0);
PS0f = R0f.w;
// 3
R0f.x = mul_nonIEEE(R1f.x, PV0f.z);
R0f.x = clamp(R0f.x, 0.0, 1.0);
R0f.y = mul_nonIEEE(R1f.y, PV0f.y);
R0f.y = clamp(R0f.y, 0.0, 1.0);
R0f.z = mul_nonIEEE(R1f.z, PV0f.w);
R0f.z = clamp(R0f.z, 0.0, 1.0);
// export

R0f.xyz = contrasty(R0f.xyz);
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
}
