#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_packing : enable
// shader 4473fd14fef37c81
//link clothes
const float hazeFactor = $hazeFactor;
layout(binding = 1, std140) uniform uniformBlockVS1
{
vec4 uf_blockVS1[1024];
};

layout(binding = 2, std140) uniform uniformBlockVS2
{
vec4 uf_blockVS2[1024];
};

layout(binding = 4, std140) uniform uniformBlockVS4
{
vec4 uf_blockVS4[1024];
};

uniform vec2 uf_windowSpaceToClipSpaceTransform;
uniform float uf_alphaTestRef;
layout(location = 0) in uvec4 attrDataSem0;
layout(location = 1) in uvec4 attrDataSem1;
layout(location = 2) in uvec4 attrDataSem2;
layout(location = 3) in uvec4 attrDataSem3;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 0) out vec4 passParameterSem1;
layout(location = 1) out vec4 passParameterSem0;
layout(location = 2) out vec4 passParameterSem2;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R11i = ivec4(0);
ivec4 R12i = ivec4(0);
ivec4 R13i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
uvec4 attrDecoder;
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = ivec4(gl_VertexID, 0, 0, gl_InstanceID);
attrDecoder.x = attrDataSem3.x;
attrDecoder.x = (attrDecoder.x>>24)|((attrDecoder.x>>8)&0xFF00)|((attrDecoder.x<<8)&0xFF0000)|((attrDecoder.x<<24));
attrDecoder.y = 0;
attrDecoder.z = 0;
attrDecoder.w = 0;
R1i = ivec4(int(attrDecoder.x), 0, 0, 1);
attrDecoder.xyz = attrDataSem0.xyz;
attrDecoder.xyz = (attrDecoder.xyz>>24)|((attrDecoder.xyz>>8)&0xFF00)|((attrDecoder.xyz<<8)&0xFF0000)|((attrDecoder.xyz<<24));
attrDecoder.w = 0;
R3i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), floatBitsToInt(1.0));
attrDecoder.xyz = attrDataSem1.xyz;
attrDecoder.xyz = (attrDecoder.xyz>>24)|((attrDecoder.xyz>>8)&0xFF00)|((attrDecoder.xyz<<8)&0xFF0000)|((attrDecoder.xyz<<24));
attrDecoder.w = 0;
R2i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), floatBitsToInt(0.0));
attrDecoder.xy = attrDataSem2.xy;
attrDecoder.xy = (attrDecoder.xy>>24)|((attrDecoder.xy>>8)&0xFF00)|((attrDecoder.xy<<8)&0xFF0000)|((attrDecoder.xy<<24));
attrDecoder.z = 0;
attrDecoder.w = 0;
R4i = ivec4(int(attrDecoder.x), int(attrDecoder.y), floatBitsToInt(0.0), floatBitsToInt(1.0));
// 0
R10i.x = 0x3f800000;
R9i.y = 0x3f800000;
R7i.z = 0x3f800000;
R1i.w = R3i.w;
R0i.w = R1i.x * 0x00000003;
PS0i = R0i.w;
// 1
R11i.x = 0x3f800000;
R0i.y = PS0i + 0x00000002;
R0i.z = PS0i + int(1);
R9i.w = 0x3f800000;
R9i.z = 0x3f800000;
PS1i = R9i.z;
R5i.xyzw = floatBitsToInt(uf_blockVS2[R0i.w].xyzw);
R6i.xyzw = floatBitsToInt(uf_blockVS2[R0i.z].xyzw);
R0i.xyzw = floatBitsToInt(uf_blockVS2[R0i.y].xyzw);
// 0
R125i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),intBitsToFloat(R3i.w)),vec4(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),intBitsToFloat(R5i.w))));
PV0i.x = R125i.x;
PV0i.y = R125i.x;
PV0i.z = R125i.x;
PV0i.w = R125i.x;
R11i.z = 0x3f800000;
PS0i = R11i.z;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),intBitsToFloat(R3i.w)),vec4(intBitsToFloat(R6i.x),intBitsToFloat(R6i.y),intBitsToFloat(R6i.z),intBitsToFloat(R6i.w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R124i.y = tempi.x;
R127i.x = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + uf_blockVS4[1].x);
PS1i = R127i.x;
// 2
backupReg0i = R0i.x;
backupReg1i = R0i.y;
backupReg2i = R0i.w;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),intBitsToFloat(R3i.w)),vec4(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(R0i.z),intBitsToFloat(backupReg2i))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R125i.z = tempi.x;
R126i.y = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + uf_blockVS4[1].y);
PS0i = R126i.y;
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R125i.x),intBitsToFloat(R124i.y),intBitsToFloat(PV0i.x),intBitsToFloat(R1i.w)),vec4(uf_blockVS1[3].x,uf_blockVS1[3].y,uf_blockVS1[3].z,uf_blockVS1[3].w)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R3i.w = tempi.x;
R10i.z = 0x3f800000;
PS1i = R10i.z;
// 4
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R125i.x),intBitsToFloat(R124i.y),intBitsToFloat(R125i.z),intBitsToFloat(R1i.w)),vec4(uf_blockVS1[2].x,uf_blockVS1[2].y,uf_blockVS1[2].z,uf_blockVS1[2].w)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R3i.z = tempi.x;
R13i.z = 0x3f800000;
PS0i = R13i.z;
// 5
R3i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R125i.x),intBitsToFloat(R124i.y),intBitsToFloat(R125i.z),intBitsToFloat(R1i.w)),vec4(uf_blockVS1[0].x,uf_blockVS1[0].y,uf_blockVS1[0].z,uf_blockVS1[0].w)));
PV1i.x = R3i.x;
PV1i.y = R3i.x;
PV1i.z = R3i.x;
PV1i.w = R3i.x;
R12i.z = 0x3f800000;
PS1i = R12i.z;
// 6
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R125i.x),intBitsToFloat(R124i.y),intBitsToFloat(R125i.z),intBitsToFloat(R1i.w)),vec4(uf_blockVS1[1].x,uf_blockVS1[1].y,uf_blockVS1[1].z,uf_blockVS1[1].w)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R3i.y = tempi.x;
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R3i.w));
PS0i = floatBitsToInt(intBitsToFloat(PS0i) / 2.0);
// 7
R126i.x = floatBitsToInt(-(intBitsToFloat(R125i.x)) + uf_blockVS4[6].x);
R125i.y = floatBitsToInt(-(intBitsToFloat(R124i.y)) + uf_blockVS4[6].y);
R127i.z = floatBitsToInt(-(intBitsToFloat(R125i.z)) + uf_blockVS4[1].z);
PV1i.z = R127i.z;
R12i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.z),intBitsToFloat(PS0i)) + 0.5));
R13i.w = floatBitsToInt(1.0);
PS1i = R13i.w;
// 8
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R126i.y),intBitsToFloat(PV1i.z),-0.0),vec4(intBitsToFloat(R127i.x),intBitsToFloat(R126i.y),intBitsToFloat(PV1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R1i.w = tempi.x;
R126i.z = floatBitsToInt(-(intBitsToFloat(R125i.z)) + uf_blockVS4[6].z);
PS0i = R126i.z;
// 9
tempi.x = floatBitsToInt(dot(vec4(uf_blockVS4[2].x,uf_blockVS4[2].y,uf_blockVS4[2].z,-0.0),vec4(uf_blockVS4[2].x,uf_blockVS4[2].y,uf_blockVS4[2].z,0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.y = tempi.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
R127i.w = floatBitsToInt(tempResultf);
PS1i = R127i.w;
// 10
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R126i.x),intBitsToFloat(R125i.y),intBitsToFloat(R126i.z),-0.0),vec4(intBitsToFloat(R126i.x),intBitsToFloat(R125i.y),intBitsToFloat(R126i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R8i.y = tempi.x;
R1i.x = floatBitsToInt(-(intBitsToFloat(R125i.x)) + uf_blockVS4[11].x);
PS0i = R1i.x;
// 11
R12i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(R127i.w)));
R1i.y = floatBitsToInt(-(intBitsToFloat(R124i.y)) + uf_blockVS4[11].y);
R1i.z = floatBitsToInt(-(intBitsToFloat(R125i.z)) + uf_blockVS4[11].z);
R8i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.y), intBitsToFloat(R127i.w)));
tempResultf = 1.0 / sqrt(intBitsToFloat(R127i.y));
R126i.w = floatBitsToInt(tempResultf);
PS1i = R126i.w;
// 12
R127i.x = floatBitsToInt(dot(vec4(uf_blockVS4[7].x,uf_blockVS4[7].y,uf_blockVS4[7].z,-0.0),vec4(uf_blockVS4[7].x,uf_blockVS4[7].y,uf_blockVS4[7].z,0.0)));
PV0i.x = R127i.x;
PV0i.y = R127i.x;
PV0i.z = R127i.x;
PV0i.w = R127i.x;
R8i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(R127i.w)));
PS0i = R8i.z;
// 13
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R1i.x),intBitsToFloat(R1i.y),intBitsToFloat(R1i.z),-0.0),vec4(intBitsToFloat(R1i.x),intBitsToFloat(R1i.y),intBitsToFloat(R1i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R7i.w = tempi.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(R8i.y));
R127i.w = floatBitsToInt(tempResultf);
PS1i = R127i.w;
// 14
R8i.x = floatBitsToInt(-(intBitsToFloat(R125i.x)) + uf_blockVS4[16].x);
R7i.y = floatBitsToInt(-(intBitsToFloat(R124i.y)) + uf_blockVS4[16].y);
R4i.z = floatBitsToInt(-(intBitsToFloat(R125i.z)) + uf_blockVS4[16].z);
R10i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(PS1i)));
tempResultf = 1.0 / sqrt(intBitsToFloat(R127i.x));
R2i.w = floatBitsToInt(tempResultf);
PS0i = R2i.w;
// 15
tempi.x = floatBitsToInt(dot(vec4(uf_blockVS4[12].x,uf_blockVS4[12].y,uf_blockVS4[12].z,-0.0),vec4(uf_blockVS4[12].x,uf_blockVS4[12].y,uf_blockVS4[12].z,0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.z = tempi.x;
R10i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.y), intBitsToFloat(R127i.w)));
PS1i = R10i.y;
// 16
PV0i.x = floatBitsToInt(mul_nonIEEE(uf_blockVS4[2].x, intBitsToFloat(R126i.w)));
PV0i.y = floatBitsToInt(mul_nonIEEE(uf_blockVS4[2].y, intBitsToFloat(R126i.w)));
PV0i.z = floatBitsToInt(mul_nonIEEE(uf_blockVS4[2].z, intBitsToFloat(R126i.w)));
R11i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(R127i.w)));
tempResultf = 1.0 / sqrt(intBitsToFloat(R7i.w));
R4i.w = floatBitsToInt(tempResultf);
PS0i = R4i.w;
// 17
R7i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R12i.x),intBitsToFloat(R8i.w),intBitsToFloat(R8i.z),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = R7i.x;
PV1i.y = R7i.x;
PV1i.z = R7i.x;
PV1i.w = R7i.x;
R9i.x = floatBitsToInt(-(intBitsToFloat(R125i.x)) + uf_blockVS4[21].x);
PS1i = R9i.x;
// 18
backupReg0i = R5i.x;
R5i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),-0.0),vec4(intBitsToFloat(backupReg0i),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),0.0)));
PV0i.x = R5i.x;
PV0i.y = R5i.x;
PV0i.z = R5i.x;
PV0i.w = R5i.x;
R5i.y = floatBitsToInt(-(intBitsToFloat(R124i.y)) + uf_blockVS4[21].y);
PS0i = R5i.y;
// 19
backupReg0i = R6i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),-0.0),vec4(intBitsToFloat(R6i.x),intBitsToFloat(backupReg0i),intBitsToFloat(R6i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R6i.y = tempi.x;
R6i.z = floatBitsToInt(-(intBitsToFloat(R125i.z)) + uf_blockVS4[21].z);
PS1i = R6i.z;
// 20
backupReg0i = R0i.x;
backupReg1i = R0i.y;
backupReg2i = R0i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),-0.0),vec4(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(backupReg2i),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R0i.z = tempi.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(R127i.z));
R0i.w = floatBitsToInt(tempResultf);
PS0i = R0i.w;
// 21
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R8i.x),intBitsToFloat(R7i.y),intBitsToFloat(R4i.z),-0.0),vec4(intBitsToFloat(R8i.x),intBitsToFloat(R7i.y),intBitsToFloat(R4i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R0i.y = tempi.x;
R0i.x = floatBitsToInt(mul_nonIEEE(uf_blockVS4[7].x, intBitsToFloat(R2i.w)));
PS1i = R0i.x;
// export
gl_Position = vec4(intBitsToFloat(R3i.x), intBitsToFloat(R3i.y), intBitsToFloat(R3i.z), intBitsToFloat(R3i.w));
// 0
tempi.x = floatBitsToInt(dot(vec4(uf_blockVS4[17].x,uf_blockVS4[17].y,uf_blockVS4[17].z,-0.0),vec4(uf_blockVS4[17].x,uf_blockVS4[17].y,uf_blockVS4[17].z,0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R124i.y = tempi.x;
R125i.z = floatBitsToInt(sqrt(intBitsToFloat(R1i.w)));
PS0i = R125i.z;
// 1
backupReg0i = R1i.x;
backupReg1i = R1i.z;
R1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R4i.w)));
PV1i.y = floatBitsToInt(mul_nonIEEE(uf_blockVS4[7].y, intBitsToFloat(R2i.w)));
PV1i.z = floatBitsToInt(mul_nonIEEE(uf_blockVS4[7].z, intBitsToFloat(R2i.w)));
R1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), intBitsToFloat(R4i.w)));
R1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(R4i.w)));
PS1i = R1i.z;
// 2
backupReg0i = R0i.x;
backupReg1i = R0i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R10i.w),intBitsToFloat(R10i.y),intBitsToFloat(R11i.w),-0.0),vec4(intBitsToFloat(backupReg0i),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.z = tempi.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(backupReg1i));
R127i.w = floatBitsToInt(tempResultf);
PS0i = R127i.w;
// 3
backupReg0i = R0i.z;
backupReg0i = R0i.z;
R125i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R6i.y),intBitsToFloat(backupReg0i),-0.0),vec4(intBitsToFloat(R5i.x),intBitsToFloat(R6i.y),intBitsToFloat(backupReg0i),0.0)));
PV1i.x = R125i.x;
PV1i.y = R125i.x;
PV1i.z = R125i.x;
PV1i.w = R125i.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(R124i.y));
R126i.x = floatBitsToInt(tempResultf);
PS1i = R126i.x;
// 4
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R9i.x),intBitsToFloat(R5i.y),intBitsToFloat(R6i.z),-0.0),vec4(intBitsToFloat(R9i.x),intBitsToFloat(R5i.y),intBitsToFloat(R6i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R4i.w = tempi.x;
R127i.x = floatBitsToInt(mul_nonIEEE(uf_blockVS4[12].x, intBitsToFloat(R0i.w)));
PS0i = R127i.x;
// 5
tempi.x = floatBitsToInt(dot(vec4(uf_blockVS4[22].x,uf_blockVS4[22].y,uf_blockVS4[22].z,-0.0),vec4(uf_blockVS4[22].x,uf_blockVS4[22].y,uf_blockVS4[22].z,0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R126i.w = tempi.x;
R125i.w = floatBitsToInt(max(intBitsToFloat(R7i.x), 0.0));
PS1i = R125i.w;
// 6
backupReg0i = R8i.x;
R8i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R127i.w)));
PV0i.y = floatBitsToInt(mul_nonIEEE(uf_blockVS4[12].y, intBitsToFloat(R0i.w)));
PV0i.z = floatBitsToInt(mul_nonIEEE(uf_blockVS4[12].z, intBitsToFloat(R0i.w)));
R6i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.y), intBitsToFloat(R127i.w)));
tempResultf = 1.0 / sqrt(intBitsToFloat(R125i.x));
R124i.w = floatBitsToInt(tempResultf);
PS0i = R124i.w;
// 7
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R1i.x),intBitsToFloat(R1i.w),intBitsToFloat(R1i.z),-0.0),vec4(intBitsToFloat(R127i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R126i.y = tempi.x;
R125i.x = floatBitsToInt(sqrt(intBitsToFloat(R8i.y)));
PS1i = R125i.x;
// 8
backupReg0i = R126i.x;
backupReg0i = R126i.x;
backupReg1i = R4i.z;
backupReg0i = R126i.x;
R126i.x = floatBitsToInt(mul_nonIEEE(uf_blockVS4[17].x, intBitsToFloat(backupReg0i)));
R124i.y = floatBitsToInt(mul_nonIEEE(uf_blockVS4[17].y, intBitsToFloat(backupReg0i)));
R4i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(R127i.w)));
R127i.w = floatBitsToInt(mul_nonIEEE(uf_blockVS4[17].z, intBitsToFloat(backupReg0i)));
tempResultf = 1.0 / sqrt(intBitsToFloat(R4i.w));
R0i.w = floatBitsToInt(tempResultf);
PS0i = R0i.w;
// 9
backupReg0i = R127i.z;
backupReg1i = R126i.w;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.z), intBitsToFloat(R125i.z)));
R127i.y = R125i.z;
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.w), intBitsToFloat(R125i.w)));
R2i.w = floatBitsToInt(max(intBitsToFloat(backupReg0i), 0.0));
tempResultf = 1.0 / sqrt(intBitsToFloat(backupReg1i));
R126i.w = floatBitsToInt(tempResultf);
PS1i = R126i.w;
// 10
backupReg0i = R5i.x;
backupReg1i = R0i.z;
R5i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R124i.w)));
R125i.y = R125i.w;
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.y), intBitsToFloat(R124i.w)));
R5i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(R124i.w)));
R126i.z = floatBitsToInt(sqrt(intBitsToFloat(R7i.w)));
PS0i = R126i.z;
// 11
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R8i.x),intBitsToFloat(R6i.w),intBitsToFloat(R4i.z),-0.0),vec4(intBitsToFloat(R126i.x),intBitsToFloat(R124i.y),intBitsToFloat(R127i.w),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.w = tempi.x;
R7i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R9i.x), intBitsToFloat(R0i.w)));
PS1i = R7i.x;
// 12
backupReg0i = R0i.w;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.z),intBitsToFloat(R125i.y),intBitsToFloat(R10i.x),-0.0),vec4(uf_blockVS4[3].z,uf_blockVS4[3].y,uf_blockVS4[3].x,0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R124i.z = tempi.x;
R6i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.y), intBitsToFloat(backupReg0i)));
PS0i = R6i.y;
// 13
backupReg0i = R6i.z;
backupReg1i = R0i.w;
R124i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(R7i.z),-0.0),vec4(uf_blockVS4[4].z,uf_blockVS4[4].y,uf_blockVS4[4].x,0.0)));
PV1i.x = R124i.x;
PV1i.y = R124i.x;
PV1i.z = R124i.x;
PV1i.w = R124i.x;
R6i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(backupReg1i)));
PS1i = R6i.z;
// 14
backupReg0i = R126i.y;
R127i.x = floatBitsToInt(mul_nonIEEE(uf_blockVS4[22].x, intBitsToFloat(R126i.w)));
R126i.y = floatBitsToInt(mul_nonIEEE(uf_blockVS4[22].y, intBitsToFloat(R126i.w)));
R127i.z = floatBitsToInt(mul_nonIEEE(uf_blockVS4[22].z, intBitsToFloat(R126i.w)));
R126i.w = floatBitsToInt(max(intBitsToFloat(backupReg0i), 0.0));
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.x), intBitsToFloat(R125i.x)));
PS0i = R126i.x;
// 15
backupReg0i = R125i.x;
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.w), intBitsToFloat(R2i.w)));
R127i.y = backupReg0i;
R125i.z = R2i.w;
R2i.w = floatBitsToInt(max(intBitsToFloat(R127i.w), 0.0));
R10i.x = floatBitsToInt(sqrt(intBitsToFloat(R0i.y)));
PS1i = R10i.x;
// 16
backupReg0i = R127i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R7i.x),intBitsToFloat(R6i.y),intBitsToFloat(R6i.z),-0.0),vec4(intBitsToFloat(R127i.x),intBitsToFloat(R126i.y),intBitsToFloat(backupReg0i),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.z = tempi.x;
R9i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(R126i.z)));
PS0i = R9i.x;
// 17
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R125i.x),intBitsToFloat(R125i.z),intBitsToFloat(R11i.x),-0.0),vec4(uf_blockVS4[8].z,uf_blockVS4[8].y,uf_blockVS4[8].x,0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R5i.y = tempi.x;
R0i.y = R126i.z;
PS1i = R0i.y;
// 18
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R126i.x),intBitsToFloat(R127i.y),intBitsToFloat(R9i.y),-0.0),vec4(uf_blockVS4[9].z,uf_blockVS4[9].y,uf_blockVS4[9].x,0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R0i.w = tempi.x;
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.w), intBitsToFloat(R126i.w)));
PS0i = R126i.x;
// 19
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R0i.z),intBitsToFloat(R5i.w),-0.0),vec4(intBitsToFloat(R12i.x),intBitsToFloat(R8i.w),intBitsToFloat(R8i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R8i.w = tempi.x;
R127i.y = R126i.w;
PS1i = R127i.y;
// 20
backupReg0i = R10i.x;
backupReg0i = R10i.x;
backupReg0i = R10i.x;
R10i.x = floatBitsToInt(max(intBitsToFloat(R127i.z), 0.0));
PV0i.y = floatBitsToInt(max(intBitsToFloat(R124i.z), 0.0));
R8i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(backupReg0i)));
R7i.w = backupReg0i;
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R124i.x));
// 21
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R126i.x),intBitsToFloat(R127i.y),intBitsToFloat(R9i.z),-0.0),vec4(uf_blockVS4[13].z,uf_blockVS4[13].y,uf_blockVS4[13].x,0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R3i.w = tempi.x;
R9i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(PS0i)));
PS1i = R9i.z;
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R9i.x),intBitsToFloat(R0i.y),intBitsToFloat(R9i.w),-0.0),vec4(uf_blockVS4[14].z,uf_blockVS4[14].y,uf_blockVS4[14].x,0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.y = tempi.x;
R127i.z = floatBitsToInt(sqrt(intBitsToFloat(R4i.w)));
PS0i = R127i.z;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R0i.z),intBitsToFloat(R5i.w),-0.0),vec4(intBitsToFloat(R10i.w),intBitsToFloat(R10i.y),intBitsToFloat(R11i.w),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R126i.y = tempi.x;
R126i.x = floatBitsToInt(max(intBitsToFloat(R5i.y), 0.0));
PS1i = R126i.x;
// 2
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.w), intBitsToFloat(R2i.w)));
PV0i.y = R2i.w;
R124i.z = floatBitsToInt(max(intBitsToFloat(R8i.w), 0.0));
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(R127i.z)));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R0i.w));
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(R10i.z),-0.0),vec4(uf_blockVS4[18].z,uf_blockVS4[18].y,uf_blockVS4[18].x,0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R126i.z = tempi.x;
R124i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(PS0i)));
PS1i = R124i.y;
// 4
R124i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R8i.z),intBitsToFloat(R7i.w),intBitsToFloat(R11i.z),-0.0),vec4(uf_blockVS4[19].z,uf_blockVS4[19].y,uf_blockVS4[19].x,0.0)));
PV0i.x = R124i.x;
PV0i.y = R124i.x;
PV0i.z = R124i.x;
PV0i.w = R124i.x;
R125i.y = R127i.z;
PS0i = R125i.y;
// 5
R125i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R0i.z),intBitsToFloat(R5i.w),-0.0),vec4(intBitsToFloat(R1i.x),intBitsToFloat(R1i.w),intBitsToFloat(R1i.z),0.0)));
PV1i.x = R125i.x;
PV1i.y = R125i.x;
PV1i.z = R125i.x;
PV1i.w = R125i.x;
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.x), intBitsToFloat(R10i.x)));
PS1i = R126i.x;
// 6
backupReg0i = R127i.y;
PV0i.x = R10i.x;
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.z), intBitsToFloat(R9i.z)));
PV0i.z = floatBitsToInt(max(intBitsToFloat(R3i.w), 0.0));
R127i.w = floatBitsToInt(max(intBitsToFloat(R126i.y), 0.0));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(backupReg0i));
// 7
backupReg0i = R126i.x;
R126i.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(PV0i.x),intBitsToFloat(R12i.z),-0.0),vec4(uf_blockVS4[23].z,uf_blockVS4[23].y,uf_blockVS4[23].x,0.0)));
PV1i.x = R126i.x;
PV1i.y = R126i.x;
PV1i.z = R126i.x;
PV1i.w = R126i.x;
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(PS0i)));
PS1i = R125i.w;
// 8
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R126i.w),intBitsToFloat(R125i.y),intBitsToFloat(R13i.z),-0.0),vec4(uf_blockVS4[24].z,uf_blockVS4[24].y,uf_blockVS4[24].x,0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R124i.z = tempi.x;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(R124i.y)));
PS0i = R127i.x;
// 9
backupReg0i = R126i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R0i.z),intBitsToFloat(R5i.w),-0.0),vec4(intBitsToFloat(R8i.x),intBitsToFloat(R6i.w),intBitsToFloat(R4i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R126i.z = tempi.x;
R125i.y = floatBitsToInt(max(intBitsToFloat(backupReg0i), 0.0));
PS1i = R125i.y;
// 10
backupReg0i = R127i.y;
backupReg0i = R127i.y;
backupReg1i = R125i.x;
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), uf_blockVS4[0].x));
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), uf_blockVS4[0].y));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), uf_blockVS4[0].z));
PV0i.w = floatBitsToInt(max(intBitsToFloat(backupReg1i), 0.0));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R124i.x));
// 11
R124i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(R125i.w)));
R124i.y = floatBitsToInt(max(intBitsToFloat(R126i.z), 0.0));
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.y), intBitsToFloat(PS0i)));
R125i.w = floatBitsToInt(max(intBitsToFloat(R126i.x), 0.0));
R125i.y = floatBitsToInt(1.0 / intBitsToFloat(R124i.z));
PS1i = R125i.y;
// 12
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R0i.z),intBitsToFloat(R5i.w),-0.0),vec4(intBitsToFloat(R7i.x),intBitsToFloat(R6i.y),intBitsToFloat(R6i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.x),uf_blockVS4[5].y) + intBitsToFloat(R127i.y)));
PS0i = R126i.x;
// 13
backupReg0i = R126i.z;
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.w), intBitsToFloat(R125i.y)));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.x),uf_blockVS4[5].x) + intBitsToFloat(R125i.x)));
PV1i.y = R123i.y;
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.y), intBitsToFloat(backupReg0i)));
R125i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.x),uf_blockVS4[5].z) + intBitsToFloat(R127i.z)));
PS1i = floatBitsToInt(max(intBitsToFloat(PV0i.x), 0.0));
// 14
backupReg0i = R126i.x;
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.x),uf_blockVS4[10].y) + intBitsToFloat(backupReg0i)));
PV0i.y = floatBitsToInt(uf_blockVS1[9].w * intBitsToFloat(0x3d430c31));
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.x),uf_blockVS4[10].x) + intBitsToFloat(PV1i.y)));
PV0i.w = floatBitsToInt(uf_blockVS1[9].w + intBitsToFloat(0xc1a80000));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(PV1i.x)));
PS0i = R127i.w;
// 15
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.x),uf_blockVS4[10].z) + intBitsToFloat(R125i.w)));
PV1i.x = R123i.x;
PV1i.y = floatBitsToInt(-(intBitsToFloat(R12i.w)) + uf_blockVS1[9].y);
R124i.z = floatBitsToInt(floor(intBitsToFloat(PV0i.y)));
R123i.w = floatBitsToInt((intBitsToFloat(PV0i.w) * intBitsToFloat(0x3d430c31) + 1.0));
PV1i.w = R123i.w;
R0i.x = R4i.x;
PS1i = R0i.x;
// 16
backupReg0i = R126i.x;
R126i.x = floatBitsToInt(floor(intBitsToFloat(PV1i.w)));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.z),uf_blockVS4[15].z) + intBitsToFloat(PV1i.x)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.z),uf_blockVS4[15].y) + intBitsToFloat(backupReg0i)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.z),uf_blockVS4[15].x) + intBitsToFloat(R127i.z)));
PV0i.w = R123i.w;
R125i.w = floatBitsToInt(1.0 / intBitsToFloat(PV1i.y));
PS0i = R125i.w;
// 17
backupReg0i = R127i.w;
R124i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.w),uf_blockVS4[20].x) + intBitsToFloat(PV0i.w)));
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.w),uf_blockVS4[20].z) + intBitsToFloat(PV0i.y)));
PV1i.z = floatBitsToInt(intBitsToFloat(R124i.z) * intBitsToFloat(0x3d4ccccd));
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),uf_blockVS4[20].y) + intBitsToFloat(PV0i.z)));
R0i.y = R4i.y;
PS1i = R0i.y;
// 18
R123i.x = floatBitsToInt((-(intBitsToFloat(R126i.x)) * intBitsToFloat(0x41a80000) + uf_blockVS1[9].w));
PV0i.x = R123i.x;
R123i.z = floatBitsToInt((mul_nonIEEE(uf_blockVS1[9].x,intBitsToFloat(R125i.w)) + -(uf_blockVS1[9].z)));
PV0i.z = R123i.z;
PS0i = floatBitsToInt(1.0 / intBitsToFloat(PV1i.z));
// 19
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(PS0i)));
PV1i.x = clampFI32(PV1i.x);
PV1i.y = floatBitsToInt(intBitsToFloat(R124i.x) + uf_blockVS1[4].x);
PV1i.z = floatBitsToInt(intBitsToFloat(R127i.w) + uf_blockVS1[4].y);
PV1i.w = floatBitsToInt(intBitsToFloat(R125i.y) + uf_blockVS1[4].z);
PS1i = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(0x3d4ccccd));
// 20
R4i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), uf_blockVS1[6].x));
R4i.x = clampFI32(R4i.x);
R4i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), uf_blockVS1[6].y));
R4i.y = clampFI32(R4i.y);
R4i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), uf_blockVS1[6].z));
R4i.z = clampFI32(R4i.z);
R12i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(PV1i.x)));
R4i.w = floatBitsToInt(uf_blockVS1[6].w);
PS0i = R4i.w;
// 21
R12i.x = floatBitsToInt(uf_blockVS1[8].x);
R12i.y = floatBitsToInt(uf_blockVS1[8].y);
R0i.z = R13i.w;
R12i.z = floatBitsToInt(uf_blockVS1[8].z);
PS1i = R12i.z;
// export
passParameterSem1 = vec4(intBitsToFloat(R4i.x), intBitsToFloat(R4i.y), intBitsToFloat(R4i.z), intBitsToFloat(R4i.w));
// export
passParameterSem0 = vec4(intBitsToFloat(R12i.x), intBitsToFloat(R12i.y), intBitsToFloat(R12i.z), intBitsToFloat(R12i.w))*hazeFactor;
// export
passParameterSem2 = vec4(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y), intBitsToFloat(R0i.z), intBitsToFloat(R0i.w));
}
