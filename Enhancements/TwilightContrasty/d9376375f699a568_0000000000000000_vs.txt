#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_packing : enable
// shader d9376375f699a568
//link eye
const float hazeFactor = $hazeFactor;
uniform ivec4 uf_remappedVS[42];
uniform vec2 uf_windowSpaceToClipSpaceTransform;
uniform float uf_alphaTestRef;
layout(location = 0) in uvec4 attrDataSem0;
layout(location = 1) in uvec4 attrDataSem1;
layout(location = 2) in uvec4 attrDataSem2;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 1) out vec4 passParameterSem0;
layout(location = 2) out vec4 passParameterSem3;
layout(location = 0) out vec4 passParameterSem1;
layout(location = 3) out vec4 passParameterSem4;
layout(location = 4) out vec4 passParameterSem5;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R10f = vec4(0.0);
vec4 R11f = vec4(0.0);
vec4 R12f = vec4(0.0);
vec4 R13f = vec4(0.0);
vec4 R14f = vec4(0.0);
vec4 R15f = vec4(0.0);
vec4 R16f = vec4(0.0);
vec4 R17f = vec4(0.0);
vec4 R18f = vec4(0.0);
vec4 R19f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R124f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
uvec4 attrDecoder;
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = floatBitsToInt(ivec4(gl_VertexID, 0, 0, gl_InstanceID));
attrDecoder.xyz = attrDataSem0.xyz;
attrDecoder.xyz = (attrDecoder.xyz>>24)|((attrDecoder.xyz>>8)&0xFF00)|((attrDecoder.xyz<<8)&0xFF0000)|((attrDecoder.xyz<<24));
attrDecoder.w = 0;
R2f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(floatBitsToInt(1.0)));
attrDecoder.xyz = attrDataSem1.xyz;
attrDecoder.xyz = (attrDecoder.xyz>>24)|((attrDecoder.xyz>>8)&0xFF00)|((attrDecoder.xyz<<8)&0xFF0000)|((attrDecoder.xyz<<24));
attrDecoder.w = 0;
R1f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(floatBitsToInt(0.0)));
attrDecoder.xy = attrDataSem2.xy;
attrDecoder.xy = (attrDecoder.xy>>24)|((attrDecoder.xy>>8)&0xFF00)|((attrDecoder.xy<<8)&0xFF0000)|((attrDecoder.xy<<24));
attrDecoder.z = 0;
attrDecoder.w = 0;
R3f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(floatBitsToInt(0.0)), intBitsToFloat(floatBitsToInt(1.0)));
// 0
R5f.x = dot(vec4(R2f.x,R2f.y,R2f.z,R2f.w),vec4(intBitsToFloat(uf_remappedVS[0].x),intBitsToFloat(uf_remappedVS[0].y),intBitsToFloat(uf_remappedVS[0].z),intBitsToFloat(uf_remappedVS[0].w)));
PV0f.x = R5f.x;
PV0f.y = R5f.x;
PV0f.z = R5f.x;
PV0f.w = R5f.x;
R127f.w = R2f.w;
PS0f = R127f.w;
// 1
tempf.x = dot(vec4(R2f.x,R2f.y,R2f.z,R2f.w),vec4(intBitsToFloat(uf_remappedVS[1].x),intBitsToFloat(uf_remappedVS[1].y),intBitsToFloat(uf_remappedVS[1].z),intBitsToFloat(uf_remappedVS[1].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R0f.y = tempf.x;
R5f.z = 1.0;
PS1f = R5f.z;
// 2
tempf.x = dot(vec4(R2f.x,R2f.y,R2f.z,R2f.w),vec4(intBitsToFloat(uf_remappedVS[2].x),intBitsToFloat(uf_remappedVS[2].y),intBitsToFloat(uf_remappedVS[2].z),intBitsToFloat(uf_remappedVS[2].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R3f.z = tempf.x;
R4f.z = 1.0;
PS0f = R4f.z;
// 3
backupReg0f = R0f.y;
tempf.x = dot(vec4(R5f.x,backupReg0f,PV0f.x,R127f.w),vec4(intBitsToFloat(uf_remappedVS[3].x),intBitsToFloat(uf_remappedVS[3].y),intBitsToFloat(uf_remappedVS[3].z),intBitsToFloat(uf_remappedVS[3].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R2f.w = tempf.x;
R7f.z = 1.0;
PS1f = R7f.z;
// 4
backupReg0f = R0f.y;
tempf.x = dot(vec4(R5f.x,backupReg0f,R3f.z,R127f.w),vec4(intBitsToFloat(uf_remappedVS[4].x),intBitsToFloat(uf_remappedVS[4].y),intBitsToFloat(uf_remappedVS[4].z),intBitsToFloat(uf_remappedVS[4].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R2f.z = tempf.x;
R6f.z = 1.0;
PS0f = R6f.z;
// 5
backupReg0f = R0f.y;
R2f.x = dot(vec4(R5f.x,backupReg0f,R3f.z,R127f.w),vec4(intBitsToFloat(uf_remappedVS[5].x),intBitsToFloat(uf_remappedVS[5].y),intBitsToFloat(uf_remappedVS[5].z),intBitsToFloat(uf_remappedVS[5].w)));
PV1f.x = R2f.x;
PV1f.y = R2f.x;
PV1f.z = R2f.x;
PV1f.w = R2f.x;
R9f.z = 1.0;
PS1f = R9f.z;
// 6
tempf.x = dot(vec4(R5f.x,R0f.y,R3f.z,R127f.w),vec4(intBitsToFloat(uf_remappedVS[6].x),intBitsToFloat(uf_remappedVS[6].y),intBitsToFloat(uf_remappedVS[6].z),intBitsToFloat(uf_remappedVS[6].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R2f.y = tempf.x;
R8f.z = 1.0;
PS0f = R8f.z;
// 7
R127f.x = dot(vec4(R1f.x,R1f.y,R1f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[0].x),intBitsToFloat(uf_remappedVS[0].y),intBitsToFloat(uf_remappedVS[0].z),0.0));
PV1f.x = R127f.x;
PV1f.y = R127f.x;
PV1f.z = R127f.x;
PV1f.w = R127f.x;
R11f.z = 1.0;
PS1f = R11f.z;
// 8
tempf.x = dot(vec4(R1f.x,R1f.y,R1f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[1].x),intBitsToFloat(uf_remappedVS[1].y),intBitsToFloat(uf_remappedVS[1].z),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.y = tempf.x;
R10f.z = 1.0;
PS0f = R10f.z;
// 9
tempf.x = dot(vec4(R1f.x,R1f.y,R1f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[2].x),intBitsToFloat(uf_remappedVS[2].y),intBitsToFloat(uf_remappedVS[2].z),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R127f.z = tempf.x;
R14f.z = 1.0;
PS1f = R14f.z;
// 10
tempf.x = dot(vec4(R127f.x,R127f.y,PV1f.x,-0.0),vec4(R127f.x,R127f.y,PV1f.x,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R13f.z = 1.0;
PS0f = R13f.z;
// 11
R4f.x = 0.0;
PV1f.y = intBitsToFloat(uf_remappedVS[7].w) * intBitsToFloat(0x3d430c31);
R19f.z = 1.0;
R127f.w = intBitsToFloat(uf_remappedVS[7].w) + intBitsToFloat(0xc1a80000);
tempResultf = 1.0 / sqrt(PV0f.x);
PS1f = tempResultf;
// 12
R9f.x = mul_nonIEEE(R127f.x, PS1f);
R7f.y = mul_nonIEEE(R127f.y, PS1f);
R17f.z = mul_nonIEEE(R127f.z, PS1f);
PV0f.w = floor(PV1f.y);
PS0f = 1.0 / R2f.w;
PS0f /= 2.0;
// 13
PV1f.x = PV0f.w * intBitsToFloat(0x3d4ccccd);
R123f.y = (mul_nonIEEE(R2f.z,PS0f) + 0.5);
PV1f.y = R123f.y;
R123f.z = (R127f.w * intBitsToFloat(0x3d430c31) + 1.0);
PV1f.z = R123f.z;
R18f.w = intBitsToFloat(uf_remappedVS[8].w);
R0f.x = R3f.x;
PS1f = R0f.x;
// 14
PV0f.x = -(PV1f.y) + intBitsToFloat(uf_remappedVS[7].y);
PV0f.y = floor(PV1f.z);
R0f.z = R19f.z;
R0f.w = R3f.y;
R127f.y = 1.0 / PV1f.x;
PS0f = R127f.y;
// 15
R123f.x = (-(PV0f.y) * intBitsToFloat(0x41a80000) + intBitsToFloat(uf_remappedVS[7].w));
PV1f.x = R123f.x;
R1f.y = intBitsToFloat(uf_remappedVS[9].y);
PS1f = 1.0 / PV0f.x;
// 16
R123f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[7].x),PS1f) + -(intBitsToFloat(uf_remappedVS[7].z)));
PV0f.z = R123f.z;
R127f.w = PV1f.x * intBitsToFloat(0x3d4ccccd);
// 17
PV1f.x = mul_nonIEEE(PV0f.z, R127f.y);
PV1f.x = clamp(PV1f.x, 0.0, 1.0);
R1f.z = intBitsToFloat(uf_remappedVS[9].z);
R1f.x = intBitsToFloat(uf_remappedVS[9].x);
PS1f = R1f.x;
// 18
R1f.w = mul_nonIEEE(R127f.w, PV1f.x);
// export
gl_Position = vec4(R2f.x, R2f.y, R2f.z, R2f.w);
// export
passParameterSem0 = vec4(R1f.x, R1f.y, R1f.z, R1f.w) * hazeFactor;
// export
passParameterSem3 = vec4(R0f.x, R0f.w, R0f.z, R0f.w);
// export
// skipped export to semanticId 255
// 0
R127f.xyz = vec3(-(R5f.x),-(R0f.y),-(R3f.z)) + vec3(intBitsToFloat(uf_remappedVS[10].x),intBitsToFloat(uf_remappedVS[10].y),intBitsToFloat(uf_remappedVS[10].z));
PV0f.x = R127f.x;
PV0f.y = R127f.y;
PV0f.z = R127f.z;
// 1
tempf.x = dot(vec4(PV0f.x,PV0f.y,PV0f.z,-0.0),vec4(PV0f.x,PV0f.y,PV0f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R125f.y = tempf.x;
R126f.x = -(R5f.x) + intBitsToFloat(uf_remappedVS[11].x);
PS1f = R126f.x;
// 2
R126f.y = -(R0f.y) + intBitsToFloat(uf_remappedVS[11].y);
R126f.z = -(R3f.z) + intBitsToFloat(uf_remappedVS[11].z);
tempResultf = 1.0 / sqrt(PV1f.x);
R126f.w = tempResultf;
PS0f = R126f.w;
// 3
tempf.x = dot(vec4(intBitsToFloat(uf_remappedVS[12].x),intBitsToFloat(uf_remappedVS[12].y),intBitsToFloat(uf_remappedVS[12].z),-0.0),vec4(intBitsToFloat(uf_remappedVS[12].x),intBitsToFloat(uf_remappedVS[12].y),intBitsToFloat(uf_remappedVS[12].z),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R127f.w = tempf.x;
R2f.x = mul_nonIEEE(R127f.x, PS0f);
PS1f = R2f.x;
// 4
tempf.x = dot(vec4(R126f.x,R126f.y,R126f.z,-0.0),vec4(R126f.x,R126f.y,R126f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R124f.w = tempf.x;
R127f.x = -(R5f.x) + intBitsToFloat(uf_remappedVS[13].x);
PS0f = R127f.x;
// 5
R6f.x = mul_nonIEEE(R127f.y, R126f.w);
R127f.y = -(R0f.y) + intBitsToFloat(uf_remappedVS[13].y);
R124f.z = -(R3f.z) + intBitsToFloat(uf_remappedVS[13].z);
R6f.w = mul_nonIEEE(R127f.z, R126f.w);
tempResultf = 1.0 / sqrt(R127f.w);
R125f.z = tempResultf;
PS1f = R125f.z;
// 6
tempf.x = dot(vec4(intBitsToFloat(uf_remappedVS[14].x),intBitsToFloat(uf_remappedVS[14].y),intBitsToFloat(uf_remappedVS[14].z),-0.0),vec4(intBitsToFloat(uf_remappedVS[14].x),intBitsToFloat(uf_remappedVS[14].y),intBitsToFloat(uf_remappedVS[14].z),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.w = tempf.x;
tempResultf = 1.0 / sqrt(R124f.w);
R127f.z = tempResultf;
PS0f = R127f.z;
// 7
tempf.x = dot(vec4(R127f.x,R127f.y,R124f.z,-0.0),vec4(R127f.x,R127f.y,R124f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R1f.y = tempf.x;
R125f.x = -(R5f.x) + intBitsToFloat(uf_remappedVS[15].x);
PS1f = R125f.x;
// 8
R7f.x = mul_nonIEEE(R126f.x, R127f.z);
R124f.y = -(R0f.y) + intBitsToFloat(uf_remappedVS[15].y);
R0f.z = -(R3f.z) + intBitsToFloat(uf_remappedVS[15].z);
R7f.w = mul_nonIEEE(R126f.y, R127f.z);
tempResultf = 1.0 / sqrt(R127f.w);
R126f.y = tempResultf;
PS0f = R126f.y;
// 9
R126f.x = dot(vec4(intBitsToFloat(uf_remappedVS[16].x),intBitsToFloat(uf_remappedVS[16].y),intBitsToFloat(uf_remappedVS[16].z),-0.0),vec4(intBitsToFloat(uf_remappedVS[16].x),intBitsToFloat(uf_remappedVS[16].y),intBitsToFloat(uf_remappedVS[16].z),0.0));
PV1f.x = R126f.x;
PV1f.y = R126f.x;
PV1f.z = R126f.x;
PV1f.w = R126f.x;
R2f.z = mul_nonIEEE(R126f.z, R127f.z);
PS1f = R2f.z;
// 10
backupReg0f = R0f.z;
backupReg0f = R0f.z;
PV0f.x = mul_nonIEEE(intBitsToFloat(uf_remappedVS[12].x), R125f.z);
PV0f.y = mul_nonIEEE(intBitsToFloat(uf_remappedVS[12].y), R125f.z);
PV0f.z = mul_nonIEEE(intBitsToFloat(uf_remappedVS[12].z), R125f.z);
PV0f.w = mul_nonIEEE(backupReg0f, backupReg0f);
tempResultf = 1.0 / sqrt(R1f.y);
R127f.w = tempResultf;
PS0f = R127f.w;
// 11
tempf.x = dot(vec4(R2f.x,R6f.x,R6f.w,-0.0),vec4(PV0f.x,PV0f.y,PV0f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R125f.w = tempf.x;
R122f.x = (mul_nonIEEE(R124f.y,R124f.y) + PV0f.w);
PS1f = R122f.x;
// 12
backupReg0f = R0f.y;
backupReg1f = R3f.z;
R124f.x = -(R5f.x) + intBitsToFloat(uf_remappedVS[17].x);
R0f.y = -(backupReg0f) + intBitsToFloat(uf_remappedVS[17].y);
R3f.z = -(backupReg1f) + intBitsToFloat(uf_remappedVS[17].z);
R5f.w = (mul_nonIEEE(R125f.x,R125f.x) + PS1f);
tempResultf = 1.0 / sqrt(R126f.x);
R126f.w = tempResultf;
PS0f = R126f.w;
// 13
tempf.x = dot(vec4(intBitsToFloat(uf_remappedVS[18].x),intBitsToFloat(uf_remappedVS[18].y),intBitsToFloat(uf_remappedVS[18].z),-0.0),vec4(intBitsToFloat(uf_remappedVS[18].x),intBitsToFloat(uf_remappedVS[18].y),intBitsToFloat(uf_remappedVS[18].z),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R125f.z = tempf.x;
R126f.x = sqrt(R125f.y);
PS1f = R126f.x;
// 14
PV0f.x = mul_nonIEEE(intBitsToFloat(uf_remappedVS[14].x), R126f.y);
PV0f.y = mul_nonIEEE(intBitsToFloat(uf_remappedVS[14].y), R126f.y);
PV0f.z = mul_nonIEEE(intBitsToFloat(uf_remappedVS[14].z), R126f.y);
R8f.w = mul_nonIEEE(R127f.x, R127f.w);
R5f.y = mul_nonIEEE(R127f.y, R127f.w);
PS0f = R5f.y;
// 15
R127f.x = dot(vec4(R7f.x,R7f.w,R2f.z,-0.0),vec4(PV0f.x,PV0f.y,PV0f.z,0.0));
PV1f.x = R127f.x;
PV1f.y = R127f.x;
PV1f.z = R127f.x;
PV1f.w = R127f.x;
R12f.z = mul_nonIEEE(R124f.z, R127f.w);
PS1f = R12f.z;
// 16
tempf.x = dot(vec4(R124f.x,R0f.y,R3f.z,-0.0),vec4(R124f.x,R0f.y,R3f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R4f.y = tempf.x;
tempResultf = 1.0 / sqrt(R5f.w);
R124f.z = tempResultf;
PS0f = R124f.z;
// 17
tempf.x = dot(vec4(intBitsToFloat(uf_remappedVS[19].x),intBitsToFloat(uf_remappedVS[19].y),intBitsToFloat(uf_remappedVS[19].z),-0.0),vec4(intBitsToFloat(uf_remappedVS[19].x),intBitsToFloat(uf_remappedVS[19].y),intBitsToFloat(uf_remappedVS[19].z),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R127f.y = tempf.x;
tempResultf = 1.0 / sqrt(R125f.z);
R127f.w = tempResultf;
PS1f = R127f.w;
// 18
PV0f.x = mul_nonIEEE(intBitsToFloat(uf_remappedVS[16].x), R126f.w);
PV0f.y = mul_nonIEEE(intBitsToFloat(uf_remappedVS[16].y), R126f.w);
PV0f.z = mul_nonIEEE(intBitsToFloat(uf_remappedVS[16].z), R126f.w);
R126f.w = max(R125f.w, 0.0);
R3f.w = sqrt(R124f.w);
PS0f = R3f.w;
// 19
tempf.x = dot(vec4(R8f.w,R5f.y,R12f.z,-0.0),vec4(PV0f.x,PV0f.y,PV0f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R1f.z = tempf.x;
R8f.x = mul_nonIEEE(R125f.x, R124f.z);
PS1f = R8f.x;
// 20
R5f.x = mul_nonIEEE(intBitsToFloat(uf_remappedVS[18].x), R127f.w);
R6f.y = mul_nonIEEE(R124f.y, R124f.z);
R15f.z = mul_nonIEEE(R0f.z, R124f.z);
R0f.w = mul_nonIEEE(intBitsToFloat(uf_remappedVS[18].y), R127f.w);
tempResultf = 1.0 / sqrt(R4f.y);
R1f.w = tempResultf;
PS0f = R1f.w;
// 21
R0f.x = mul_nonIEEE(R126f.x, R126f.x);
R2f.y = R126f.x;
R0f.z = mul_nonIEEE(intBitsToFloat(uf_remappedVS[18].z), R127f.w);
R4f.w = max(R127f.x, 0.0);
tempResultf = 1.0 / sqrt(R127f.y);
R2f.w = tempResultf;
PS1f = R2f.w;
// 22
backupReg0f = R0f.y;
R4f.x = mul_nonIEEE(R126f.w, R126f.w);
R0f.y = R126f.w;
R16f.z = mul_nonIEEE(R124f.x, R1f.w);
R9f.w = mul_nonIEEE(backupReg0f, R1f.w);
R1f.x = sqrt(R1f.y);
PS0f = R1f.x;
// 0
backupReg0f = R0f.z;
tempf.x = dot(vec4(R8f.x,R6f.y,R15f.z,-0.0),vec4(R5f.x,R0f.w,backupReg0f,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.y = tempf.x;
R0f.z = mul_nonIEEE(R3f.z, R1f.w);
PS0f = R0f.z;
// 1
backupReg0f = R0f.y;
R125f.x = dot(vec4(R4f.x,backupReg0f,R4f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[20].z),intBitsToFloat(uf_remappedVS[20].y),intBitsToFloat(uf_remappedVS[20].x),0.0));
PV1f.x = R125f.x;
PV1f.y = R125f.x;
PV1f.z = R125f.x;
PV1f.w = R125f.x;
R126f.w = max(R1f.z, 0.0);
PS1f = R126f.w;
// 2
backupReg0f = R0f.x;
tempf.x = dot(vec4(backupReg0f,R2f.y,R5f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[21].z),intBitsToFloat(uf_remappedVS[21].y),intBitsToFloat(uf_remappedVS[21].x),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R125f.z = tempf.x;
R126f.x = mul_nonIEEE(R3f.w, R3f.w);
PS0f = R126f.x;
// 3
R124f.x = mul_nonIEEE(intBitsToFloat(uf_remappedVS[19].x), R2f.w);
R124f.y = mul_nonIEEE(intBitsToFloat(uf_remappedVS[19].y), R2f.w);
R124f.z = mul_nonIEEE(intBitsToFloat(uf_remappedVS[19].z), R2f.w);
R127f.w = R3f.w;
R127f.x = mul_nonIEEE(R4f.w, R4f.w);
PS1f = R127f.x;
// 4
backupReg0f = R1f.x;
backupReg0f = R1f.x;
backupReg0f = R1f.x;
backupReg1f = R127f.y;
R1f.x = mul_nonIEEE(backupReg0f, backupReg0f);
R127f.y = R4f.w;
R127f.z = backupReg0f;
R124f.w = max(backupReg1f, 0.0);
R125f.w = sqrt(R5f.w);
PS0f = R125f.w;
// 5
backupReg0f = R0f.z;
R0f.x = dot(vec4(R16f.z,R9f.w,backupReg0f,-0.0),vec4(R124f.x,R124f.y,R124f.z,0.0));
PV1f.x = R0f.x;
PV1f.y = R0f.x;
PV1f.z = R0f.x;
PV1f.w = R0f.x;
R124f.x = mul_nonIEEE(R126f.w, R126f.w);
PS1f = R124f.x;
// 6
tempf.x = dot(vec4(R127f.x,R127f.y,R6f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[22].z),intBitsToFloat(uf_remappedVS[22].y),intBitsToFloat(uf_remappedVS[22].x),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R124f.z = tempf.x;
R127f.y = R126f.w;
PS0f = R127f.y;
// 7
tempf.x = dot(vec4(R126f.x,R127f.w,R7f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[23].z),intBitsToFloat(uf_remappedVS[23].y),intBitsToFloat(uf_remappedVS[23].x),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R124f.y = tempf.x;
R127f.w = max(R125f.x, 0.0);
PS1f = R127f.w;
// 8
tempf.x = dot(vec4(R9f.x,R7f.y,R17f.z,-0.0),vec4(R2f.x,R6f.x,R6f.w,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R126f.y = tempf.x;
PS0f = 1.0 / R125f.z;
// 9
tempf.x = dot(vec4(R124f.x,R127f.y,R8f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[24].z),intBitsToFloat(uf_remappedVS[24].y),intBitsToFloat(uf_remappedVS[24].x),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R2f.y = tempf.x;
R125f.x = mul_nonIEEE(R127f.w, PS0f);
PS1f = R125f.x;
// 10
tempf.x = dot(vec4(R1f.x,R127f.z,R9f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[25].z),intBitsToFloat(uf_remappedVS[25].y),intBitsToFloat(uf_remappedVS[25].x),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.w = tempf.x;
R124f.x = sqrt(R4f.y);
PS0f = R124f.x;
// 11
backupReg0f = R124f.w;
R126f.x = mul_nonIEEE(R125f.w, R125f.w);
R125f.y = R125f.w;
R127f.z = mul_nonIEEE(R124f.w, R124f.w);
R124f.w = max(R0f.x, 0.0);
R127f.y = backupReg0f;
PS1f = R127f.y;
// 12
tempf.x = dot(vec4(R9f.x,R7f.y,R17f.z,-0.0),vec4(R7f.x,R7f.w,R2f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R126f.w = tempf.x;
R125f.w = max(R124f.z, 0.0);
PS0f = R125f.w;
// 13
backupReg0f = R124f.x;
backupReg0f = R124f.x;
backupReg0f = R124f.x;
R124f.x = max(R126f.y, 0.0);
R126f.y = mul_nonIEEE(backupReg0f, backupReg0f);
R125f.z = backupReg0f;
R7f.w = mul_nonIEEE(R124f.w, R124f.w);
PS1f = 1.0 / R124f.y;
// 14
R127f.x = dot(vec4(R127f.z,R127f.y,R10f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[26].z),intBitsToFloat(uf_remappedVS[26].y),intBitsToFloat(uf_remappedVS[26].x),0.0));
PV0f.x = R127f.x;
PV0f.y = R127f.x;
PV0f.z = R127f.x;
PV0f.w = R127f.x;
R124f.z = mul_nonIEEE(R125f.w, PS1f);
PS0f = R124f.z;
// 15
tempf.x = dot(vec4(R126f.x,R125f.y,R11f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[27].z),intBitsToFloat(uf_remappedVS[27].y),intBitsToFloat(uf_remappedVS[27].x),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R125f.w = tempf.x;
R6f.w = mul_nonIEEE(R124f.x, R125f.x);
PS1f = R6f.w;
// 16
PV0f.x = max(R2f.y, 0.0);
R125f.y = R124f.w;
R127f.z = max(R126f.w, 0.0);
R4f.w = max(R127f.x, 0.0);
PS0f = 1.0 / R127f.w;
// 17
tempf.x = dot(vec4(R9f.x,R7f.y,R17f.z,-0.0),vec4(R8f.w,R5f.y,R12f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R127f.w = tempf.x;
R2f.y = mul_nonIEEE(PV0f.x, PS0f);
PS1f = R2f.y;
// 18
backupReg0f = R13f.z;
tempf.x = dot(vec4(R7f.w,R125f.y,backupReg0f,-0.0),vec4(intBitsToFloat(uf_remappedVS[28].z),intBitsToFloat(uf_remappedVS[28].y),intBitsToFloat(uf_remappedVS[28].x),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R13f.z = tempf.x;
R7f.w = mul_nonIEEE(R127f.z, R124f.z);
PS0f = R7f.w;
// 19
R7f.x = dot(vec4(R126f.y,R125f.z,R14f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[29].z),intBitsToFloat(uf_remappedVS[29].y),intBitsToFloat(uf_remappedVS[29].x),0.0));
PV1f.x = R7f.x;
PV1f.y = R7f.x;
PV1f.z = R7f.x;
PV1f.w = R7f.x;
R5f.y = 1.0 / R125f.w;
PS1f = R5f.y;
// 20
backupReg0f = R8f.x;
R8f.x = dot(vec4(R9f.x,R7f.y,R17f.z,-0.0),vec4(backupReg0f,R6f.y,R15f.z,0.0));
PV0f.x = R8f.x;
PV0f.y = R8f.x;
PV0f.z = R8f.x;
PV0f.w = R8f.x;
R6f.y = max(R127f.w, 0.0);
PS0f = R6f.y;
// 0
R127f.x = mul_nonIEEE(R6f.w, intBitsToFloat(uf_remappedVS[30].z));
R126f.y = mul_nonIEEE(R6f.w, intBitsToFloat(uf_remappedVS[30].y));
R125f.z = mul_nonIEEE(R6f.w, intBitsToFloat(uf_remappedVS[30].x));
R125f.w = mul_nonIEEE(R4f.w, R5f.y);
R126f.x = mul_nonIEEE(R6f.y, R2f.y);
PS0f = R126f.x;
// 1
tempf.x = dot(vec4(R9f.x,R7f.y,R17f.z,-0.0),vec4(R16f.z,R9f.w,R0f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R127f.z = tempf.x;
R127f.w = 1.0 / R7f.x;
PS1f = R127f.w;
// 2
R123f.x = (mul_nonIEEE(R7f.w,intBitsToFloat(uf_remappedVS[31].x)) + R125f.z);
PV0f.x = R123f.x;
PV0f.y = max(R13f.z, 0.0);
R123f.z = (mul_nonIEEE(R7f.w,intBitsToFloat(uf_remappedVS[31].y)) + R126f.y);
PV0f.z = R123f.z;
PV0f.w = max(R8f.x, 0.0);
R126f.y = (mul_nonIEEE(R7f.w,intBitsToFloat(uf_remappedVS[31].z)) + R127f.x);
PS0f = R126f.y;
// 3
R127f.x = mul_nonIEEE(PV0f.w, R125f.w);
PV1f.x = R127f.x;
R123f.y = (mul_nonIEEE(R126f.x,intBitsToFloat(uf_remappedVS[32].x)) + PV0f.x);
PV1f.y = R123f.y;
PV1f.z = mul_nonIEEE(PV0f.y, R127f.w);
PV1f.w = max(R127f.z, 0.0);
R122f.x = (mul_nonIEEE(R126f.x,intBitsToFloat(uf_remappedVS[32].y)) + PV0f.z);
PS1f = R122f.x;
// 4
backupReg0f = R126f.y;
R123f.x = (mul_nonIEEE(PV1f.x,intBitsToFloat(uf_remappedVS[33].x)) + PV1f.y);
PV0f.x = R123f.x;
R126f.y = mul_nonIEEE(PV1f.w, PV1f.z);
PV0f.y = R126f.y;
R123f.z = (mul_nonIEEE(R126f.x,intBitsToFloat(uf_remappedVS[32].z)) + backupReg0f);
PV0f.z = R123f.z;
R123f.w = (mul_nonIEEE(PV1f.x,intBitsToFloat(uf_remappedVS[33].y)) + PS1f);
PV0f.w = R123f.w;
// 5
R123f.y = (mul_nonIEEE(PV0f.y,intBitsToFloat(uf_remappedVS[34].y)) + PV0f.w);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(PV0f.y,intBitsToFloat(uf_remappedVS[34].x)) + PV0f.x);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R127f.x,intBitsToFloat(uf_remappedVS[33].z)) + PV0f.z);
PV1f.w = R123f.w;
// 6
R123f.x = (mul_nonIEEE(R126f.y,intBitsToFloat(uf_remappedVS[34].z)) + PV1f.w);
PV0f.x = R123f.x;
PV0f.y = PV1f.y + intBitsToFloat(uf_remappedVS[35].y);
PV0f.w = PV1f.z + intBitsToFloat(uf_remappedVS[35].x);
// 7
R18f.x = mul_nonIEEE(PV0f.w, intBitsToFloat(uf_remappedVS[8].x));
R18f.x = clamp(R18f.x, 0.0, 1.0);
R18f.y = mul_nonIEEE(PV0f.y, intBitsToFloat(uf_remappedVS[8].y));
R18f.y = clamp(R18f.y, 0.0, 1.0);
PV1f.w = PV0f.x + intBitsToFloat(uf_remappedVS[35].z);
// 8
R18f.z = mul_nonIEEE(PV1f.w, intBitsToFloat(uf_remappedVS[8].z));
R18f.z = clamp(R18f.z, 0.0, 1.0);
// export
passParameterSem1 = vec4(R18f.x, R18f.y, R18f.z, R18f.w);
// 0
R18f.x = dot(vec4(R3f.x,R3f.y,R19f.z,R19f.z),vec4(intBitsToFloat(uf_remappedVS[36].x),intBitsToFloat(uf_remappedVS[36].y),intBitsToFloat(uf_remappedVS[36].z),intBitsToFloat(uf_remappedVS[36].w)));
PV0f.x = R18f.x;
PV0f.y = R18f.x;
PV0f.z = R18f.x;
PV0f.w = R18f.x;
// 1
tempf.x = dot(vec4(R3f.x,R3f.y,R19f.z,R19f.z),vec4(intBitsToFloat(uf_remappedVS[37].x),intBitsToFloat(uf_remappedVS[37].y),intBitsToFloat(uf_remappedVS[37].z),intBitsToFloat(uf_remappedVS[37].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R18f.y = tempf.x;
// 2
tempf.x = dot(vec4(R3f.x,R3f.y,R19f.z,R19f.z),vec4(intBitsToFloat(uf_remappedVS[38].x),intBitsToFloat(uf_remappedVS[38].y),intBitsToFloat(uf_remappedVS[38].z),intBitsToFloat(uf_remappedVS[38].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R18f.z = tempf.x;
// 3
R8f.x = dot(vec4(R3f.x,R3f.y,R19f.z,R19f.z),vec4(intBitsToFloat(uf_remappedVS[39].x),intBitsToFloat(uf_remappedVS[39].y),intBitsToFloat(uf_remappedVS[39].z),intBitsToFloat(uf_remappedVS[39].w)));
PV1f.x = R8f.x;
PV1f.y = R8f.x;
PV1f.z = R8f.x;
PV1f.w = R8f.x;
// 4
tempf.x = dot(vec4(R3f.x,R3f.y,R19f.z,R19f.z),vec4(intBitsToFloat(uf_remappedVS[40].x),intBitsToFloat(uf_remappedVS[40].y),intBitsToFloat(uf_remappedVS[40].z),intBitsToFloat(uf_remappedVS[40].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R8f.y = tempf.x;
// 5
tempf.x = dot(vec4(R3f.x,R3f.y,R19f.z,R19f.z),vec4(intBitsToFloat(uf_remappedVS[41].x),intBitsToFloat(uf_remappedVS[41].y),intBitsToFloat(uf_remappedVS[41].z),intBitsToFloat(uf_remappedVS[41].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R8f.z = tempf.x;
// export
passParameterSem4 = vec4(R18f.x, R18f.y, R18f.z, R18f.w);
// export
passParameterSem5 = vec4(R8f.x, R8f.y, R8f.z, R8f.w);
}
