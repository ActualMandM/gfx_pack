#version 430
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 576478ae98c2273e
// start of shader inputs/outputs, predetermined by Cemu. Do not touch
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#endif
#ifdef VULKAN
layout(set = 0, binding = 2) uniform ufBlock
{
uniform ivec4 uf_remappedVS[3];
};
#else
uniform ivec4 uf_remappedVS[3];
#endif
TEXTURE_LAYOUT(32, 0, 0) uniform sampler2D textureUnitVS0;
TEXTURE_LAYOUT(33, 0, 1) uniform sampler2D textureUnitVS1;
ATTR_LAYOUT(0, 0) in uvec4 attrDataSem0;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 0) out vec4 passParameterSem144;
// end of shader inputs/outputs
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R127i = ivec4(0);
uvec4 attrDecoder;
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[3];
bool activeMaskStackC[4];
activeMaskStack[0] = false;
activeMaskStack[1] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStackC[2] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = ivec4(gl_VertexID, 0, 0, gl_InstanceID);
attrDecoder.xy = attrDataSem0.xy;
attrDecoder.xy = (attrDecoder.xy>>24)|((attrDecoder.xy>>8)&0xFF00)|((attrDecoder.xy<<8)&0xFF0000)|((attrDecoder.xy<<24));
attrDecoder.z = 0;
attrDecoder.w = 0;
R1i = ivec4(int(attrDecoder.x), int(attrDecoder.y), floatBitsToInt(0.0), floatBitsToInt(1.0));
if( activeMaskStackC[1] == true ) {
// 0
backupReg0i = R1i.y;
backupReg0i = R1i.y;
backupReg0i = R1i.y;
R1i.y = floatBitsToInt(-(intBitsToFloat(backupReg0i)) + 1.0);
R0i.z = backupReg0i;
R0i.z = floatBitsToInt(intBitsToFloat(R0i.z) * 2.0);
R0i.w = R1i.x;
R0i.w = floatBitsToInt(intBitsToFloat(R0i.w) * 2.0);
R1i.z = floatBitsToInt(intBitsToFloat(backupReg0i) * intBitsToFloat(0x3eeb1a1f));
PS0i = R1i.z;
}
if( activeMaskStackC[1] == true ) {
R0i.x = floatBitsToInt(textureLod(textureUnitVS0, intBitsToFloat(R1i.xy),0.0).x);
R2i.xyzw = floatBitsToInt(textureLod(textureUnitVS1, intBitsToFloat(R1i.xy),0.0).xyzw);
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
backupReg0i = R0i.x;
backupReg1i = R0i.w;
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(uf_remappedVS[0].y)));
R3i.y = floatBitsToInt(intBitsToFloat(R0i.z) + -(1.0));
R3i.z = 0;
R0i.w = 0;
R3i.x = floatBitsToInt(intBitsToFloat(backupReg1i) + -(1.0));
PS0i = R3i.x;
// 1
R0i.y = floatBitsToInt(intBitsToFloat(uf_remappedVS[0].x) + intBitsToFloat(PV0i.x));
R0i.z = 0x3f800000;
R3i.w = 0x3f800000;
// 2
predResult = (intBitsToFloat(uf_remappedVS[1].x) > intBitsToFloat(R0i.y));
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
PV0i.x = R1i.z;
PV0i.x = floatBitsToInt(intBitsToFloat(PV0i.x) * 2.0);
PV0i.w = floatBitsToInt(-(intBitsToFloat(R0i.y)) + intBitsToFloat(uf_remappedVS[2].z));
R127i.z = floatBitsToInt(1.0 / intBitsToFloat(R0i.y));
PS0i = R127i.z;
// 1
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[2].w), intBitsToFloat(PV0i.w)));
R1i.w = int(-1);
R3i.y = floatBitsToInt(intBitsToFloat(PV0i.x) + -(1.0));
PS1i = R3i.y;
// 2
R0i.w = floatBitsToInt(intBitsToFloat(PV1i.y) * intBitsToFloat(R127i.z));
}
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
predResult = (intBitsToFloat(R0i.y) > intBitsToFloat(uf_remappedVS[1].y));
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
// 0
PV0i.x = floatBitsToInt(intBitsToFloat(R1i.z) + intBitsToFloat(0x3f0a72f0));
PV0i.x = floatBitsToInt(intBitsToFloat(PV0i.x) * 2.0);
PV0i.w = floatBitsToInt(intBitsToFloat(R0i.y) + -(intBitsToFloat(uf_remappedVS[2].z)));
R127i.z = floatBitsToInt(1.0 / intBitsToFloat(R0i.y));
PS0i = R127i.z;
// 1
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[2].w), intBitsToFloat(PV0i.w)));
R1i.w = int(-1);
R3i.y = floatBitsToInt(intBitsToFloat(PV0i.x) + -(1.0));
PS1i = R3i.y;
// 2
R0i.w = floatBitsToInt(intBitsToFloat(PV1i.y) * intBitsToFloat(R127i.z));
}
activeMaskStack[2] = activeMaskStack[2] == false;
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
if( activeMaskStackC[3] == true ) {
// 0
R1i.w = R0i.w;
}
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
PV0i.x = ((intBitsToFloat(R2i.w) >= 0.5)?int(0xFFFFFFFF):int(0x0));
// 1
R1i.z = ((PV0i.x == 0)?(R1i.w):(0));
// 2
predResult = (R1i.z != 0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
PV0i.x = R2i.y;
PV0i.x = floatBitsToInt(intBitsToFloat(PV0i.x) * 2.0);
PV0i.y = R2i.x;
PV0i.y = floatBitsToInt(intBitsToFloat(PV0i.y) * 2.0);
PV0i.z = floatBitsToInt(intBitsToFloat(R0i.w) * intBitsToFloat(0x41000000));
PV0i.w = R2i.z;
PV0i.w = floatBitsToInt(intBitsToFloat(PV0i.w) * 2.0);
// 1
R127i.x = floatBitsToInt(intBitsToFloat(PV0i.w) * intBitsToFloat(0x3fb8aa3b));
R127i.y = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(0x3fb8aa3b));
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.y) * intBitsToFloat(0x3fb8aa3b));
PV1i.w = floatBitsToInt(max(intBitsToFloat(PV0i.z), 1.0));
// 2
R0i.z = floatBitsToInt(min(intBitsToFloat(PV1i.w), intBitsToFloat(0x41200000)));
R2i.x = floatBitsToInt(exp2(intBitsToFloat(PV1i.z)));
PS0i = R2i.x;
// 3
R2i.y = floatBitsToInt(exp2(intBitsToFloat(R127i.y)));
PS1i = R2i.y;
// 4
R2i.w = 0x3f800000;
R2i.z = floatBitsToInt(exp2(intBitsToFloat(R127i.x)));
PS0i = R2i.z;
}
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
R3i.x = 0x41200000;
R3i.y = 0;
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
R0i.x = R0i.z;
}
// export
SET_POSITION(vec4(intBitsToFloat(R3i.x), intBitsToFloat(R3i.y), intBitsToFloat(R3i.z), intBitsToFloat(R3i.w)));
// export
gl_PointSize = (vec4(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y), intBitsToFloat(R0i.y), intBitsToFloat(R0i.y))).x;
// export
passParameterSem144 = vec4(intBitsToFloat(R2i.x), intBitsToFloat(R2i.y), intBitsToFloat(R2i.z), intBitsToFloat(R2i.w));
if( activeMaskStackC[1] == true ) {
// 0
}
}
