#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 261e4bfa5cdcf153
const float resScale = $height/$gameHeight;
uniform ivec4 uf_remappedPS[6];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x165bd000 res 1280x720x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x169ba800 res 320x180x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x16f10000 res 1280x720x1 dim 1 tm: 4 format 0011 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 2 2 2 border: 0
layout(location = 1) in vec4 passParameterSem136;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[2];
bool activeMaskStackC[3];
activeMaskStack[0] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw));
R1i = floatBitsToInt(passParameterSem136);
if( activeMaskStackC[1] == true ) {
R2i.x = floatBitsToInt(texture(textureUnitPS2, intBitsToFloat(R1i.xy)).x);
R3i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R1i.xy)).xyzw);
R1i.xyzw = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R1i.xy)).xyzw);
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(uf_remappedPS[0].z)) + intBitsToFloat(uf_remappedPS[1].z)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(uf_remappedPS[0].w)) + intBitsToFloat(uf_remappedPS[1].w)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((intBitsToFloat(R3i.w) * 2.0 + -(1.0)));
PV0i.z = R123i.z;
R127i.w = floatBitsToInt(-(intBitsToFloat(R3i.x)) + intBitsToFloat(R1i.x));
R127i.z = floatBitsToInt(sqrt(intBitsToFloat(R1i.w)));
PS0i = R127i.z;
// 1
PV1i.x = floatBitsToInt(max(intBitsToFloat(PV0i.z), -(intBitsToFloat(PV0i.z))));
R127i.y = floatBitsToInt(-(intBitsToFloat(R3i.y)) + intBitsToFloat(R1i.y));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.y),intBitsToFloat(uf_remappedPS[2].w)) + intBitsToFloat(PV0i.y)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.y),intBitsToFloat(uf_remappedPS[2].z)) + intBitsToFloat(PV0i.x)));
PV1i.w = R123i.w;
R126i.z = floatBitsToInt(-(intBitsToFloat(R3i.z)) + intBitsToFloat(R1i.z));
PS1i = R126i.z;
// 2
backupReg0i = R127i.w;
backupReg1i = R127i.z;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.x),intBitsToFloat(uf_remappedPS[3].z)) + intBitsToFloat(PV1i.w)));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.x),intBitsToFloat(uf_remappedPS[3].w)) + intBitsToFloat(PV1i.z)));
PV0i.y = R123i.y;
R127i.z = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + 1.0);
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(uf_remappedPS[4].x) / resScale) + intBitsToFloat(R3i.x)));
PS0i = floatBitsToInt(sqrt(intBitsToFloat(backupReg1i)));
// 3
R123i.x = floatBitsToInt((-(intBitsToFloat(PS0i)) * 2.0 + intBitsToFloat(0x40400000)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(uf_remappedPS[4].x) / resScale) + intBitsToFloat(R3i.y)));
PV1i.y = R123i.y;
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(PS0i)));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.z),intBitsToFloat(uf_remappedPS[4].x) / resScale) + intBitsToFloat(R3i.z)));
PV1i.w = R123i.w;
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.y));
// 4
PV0i.x = floatBitsToInt(-(intBitsToFloat(R3i.x)) + intBitsToFloat(R127i.w));
PV0i.y = floatBitsToInt(-(intBitsToFloat(R3i.y)) + intBitsToFloat(PV1i.y));
PV0i.z = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R127i.x)), intBitsToFloat(PS1i)));
R0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(PV1i.z)));
PV0i.w = R0i.w;
PS0i = floatBitsToInt(-(intBitsToFloat(R3i.z)) + intBitsToFloat(PV1i.w));
// 5
PV1i.x = ((intBitsToFloat(PV0i.z) > intBitsToFloat(uf_remappedPS[5].z))?int(0xFFFFFFFF):int(0x0));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.w)) + intBitsToFloat(R3i.y)));
PV1i.y = R126i.y;
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.w)) + intBitsToFloat(R3i.x)));
PV1i.z = R126i.z;
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS0i),intBitsToFloat(PV0i.w)) + intBitsToFloat(R3i.z)));
PV1i.w = R126i.w;
R1i.w = 0;
PS1i = R1i.w;
// 6
R123i.x = ((PV1i.x == 0)?(R127i.z):(0));
PV0i.x = R123i.x;
R127i.yzw = floatBitsToInt(vec3(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z)) + vec3(-(intBitsToFloat(PV1i.z)),-(intBitsToFloat(PV1i.y)),-(intBitsToFloat(PV1i.w))));
// 7
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(0xbf400000));
PV1i.z = floatBitsToInt(intBitsToFloat(PV1i.z) * 4.0);
PV1i.z = clampFI32(PV1i.z);
// 8
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(PV1i.z)));
PV0i.y = R0i.y;
// 9
R1i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(PV0i.y)) + intBitsToFloat(R126i.z)));
R1i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(PV0i.y)) + intBitsToFloat(R126i.y)));
R1i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.w),intBitsToFloat(PV0i.y)) + intBitsToFloat(R126i.w)));
// 10
predResult = (intBitsToFloat(uf_remappedPS[5].w) != 0.0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
PV0i.x = ((intBitsToFloat(R3i.w) > intBitsToFloat(0x3efae148))?int(0xFFFFFFFF):int(0x0));
R127i.y = floatBitsToInt(-(intBitsToFloat(R0i.w)) + 1.0);
R127i.z = R0i.w;
PV0i.w = ((intBitsToFloat(0x3f028f5c) > intBitsToFloat(R3i.w))?int(0xFFFFFFFF):int(0x0));
R126i.y = 0;
PS0i = R126i.y;
// 1
R127i.x = R3i.w;
R125i.y = 0x3f800000;
R126i.z = ((PV0i.x == 0)?(0):(PV0i.w));
PV1i.z = R126i.z;
R126i.w = R3i.w;
R127i.w = floatBitsToInt(intBitsToFloat(R0i.y) * 1.0);
PS1i = R127i.w;
// 2
backupReg0i = R127i.y;
backupReg0i = R127i.y;
R126i.x = 0x3f800000;
R127i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R127i.z)),intBitsToFloat(R0i.y)) + intBitsToFloat(R127i.z)));
PV0i.y = R127i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(backupReg0i)),intBitsToFloat(R0i.y)) + intBitsToFloat(backupReg0i)));
PV0i.z = R123i.z;
R0i.w = ((PV1i.z == 0)?(0):(0x3f800000));
R1i.w = ((PV1i.z == 0)?(0x3f800000):(0));
PS0i = R1i.w;
// 3
backupReg0i = R1i.x;
backupReg1i = R1i.y;
backupReg2i = R1i.z;
R1i.x = ((R126i.z == 0)?(PV0i.z):(backupReg0i));
R1i.y = ((R126i.z == 0)?(PV0i.y):(backupReg1i));
R1i.z = ((R126i.z == 0)?(R127i.w):(backupReg2i));
R4i.x = ((R126i.z == 0)?(PV0i.z):(R126i.y));
PS1i = R4i.x;
// 4
R4i.y = ((R126i.z == 0)?(R127i.y):(R127i.x));
R4i.z = ((R126i.z == 0)?(R127i.w):(R126i.w));
R4i.w = ((R126i.z == 0)?(R126i.x):(R125i.y));
}
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
R0i.w = R1i.w;
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
R123i.x = ((R1i.w == 0)?(R1i.x):(R4i.x));
PV0i.x = R123i.x;
R123i.y = ((R1i.w == 0)?(R1i.z):(R4i.z));
PV0i.y = R123i.y;
R123i.z = ((R1i.w == 0)?(R1i.y):(R4i.y));
PV0i.z = R123i.z;
R2i.w = 0x3f800000;
PV0i.w = R2i.w;
// 1
R123i.x = ((R1i.w == 0)?(PV0i.w):(R4i.w));
PV1i.x = R123i.x;
R0i.y = ((R0i.w == 0)?(PV0i.z):(R4i.y));
R0i.z = ((R0i.w == 0)?(PV0i.y):(R4i.z));
R0i.x = ((R0i.w == 0)?(PV0i.x):(R4i.x));
PS1i = R0i.x;
// 2
backupReg0i = R0i.w;
R0i.w = ((backupReg0i == 0)?(PV1i.x):(R4i.w));
}
// export
passPixelColor0 = vec4(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y), intBitsToFloat(R0i.z), intBitsToFloat(R0i.w));
}
